# Name of the stack to deploy in docker swarm
group_stack_name: regards
# Everything stored in the workdir_local is not shared across swarm nodes. 
# We replicate everything on each swarm node to let microservice spawn whatever they want
group_workdir_local: "{{ global_stack.workdir }}"

group_setype: 'container_file_t'
group_seuser: 'system_u'

# BEGIN - SPECIFIC PART RELATED TO LOCAL-INSECURE
# The user that owns REGARDS installed files. As this is Docker that runs the stack, 
# it's ok to give it to him all REGARDS files
group_container_root_user: '{{ global_regards.your_user }}'
# When false, regards users creation need to be done externally
group_enable_setup_regards_users: false
# Your user has access to regards installed files 
group_container_root_group: "{{ global_regards.your_user }}"
# Your user owns all files created by containers and runtime server
group_container_run_user: "{{ global_regards.your_user }}"
group_container_run_group: "{{ global_regards.your_user }}"
# Your user uid / gid
group_container_run_uid: "{{ global_regards.your_user_id }}"
group_container_run_gid: "{{ global_regards.your_user_id }}"
# END - SPECIFIC PART RELATED TO LOCAL-INSECURE


group_docker_network_name: 'regards_{{ group_stack_name }}'
group_docker_network_ip_network: '10.11.7.'

group_docker_registry: ghcr.io/regardsoss


group_docker_tags:
  cots: '{{ global_regards.version }}'
  back: '{{ global_regards.version }}'
  front: '{{ global_regards.version }}'
  plugins: '{{ global_regards.version }}'

# Plugins
group_docker_plugins:
  - image: rs-download-metalink-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-download-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-fem-driver-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-stac-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-custom-command-file-validation-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-aip-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-postgresql-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-feature-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-webservice-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-local-storage-location
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-enhanced-descriptive-aip-generation-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-rabbitmq-sender-plugin
    tag: "{{ group_docker_tags.plugins }}"

# Stack
group_docker_mservices:
  config:
    tag: "{{ group_docker_tags.back }}"
    http: 9031
  registry:
    http: 9032
    tag: "{{ group_docker_tags.back }}"
  gateway:
    # jdwp: 19030
    tag: "{{ group_docker_tags.back }}"
  admin_instance:
    # jdwp: 19037
    tag: "{{ group_docker_tags.back }}"
  admin:
    # jdwp: 19033
    tag: "{{ group_docker_tags.back }}"
  authentication:
    # jdwp: 19034
    tag: "{{ group_docker_tags.back }}"
  dam:
    # jdwp: 19035
    tag: "{{ group_docker_tags.back }}"
  catalog:
    # jdwp: 19036
    tag: "{{ group_docker_tags.back }}"
  access_instance:
    # jdwp: 19040
    tag: "{{ group_docker_tags.back }}"
  access_project:
    # jdwp: 19041
    tag: "{{ group_docker_tags.back }}"
  notifier:
    # jdwp: 19039
    tag: "{{ group_docker_tags.back }}"
  fem:
    # jdwp: 19038
    tag: "{{ group_docker_tags.back }}"
  storage:
    # jdwp: 19042
    tag: "{{ group_docker_tags.back }}"
#  order:
#    # jdwp: 19043
#    tag: "{{ group_docker_tags.back }}"
#  ingest:
#    # jdwp: 19044
#    tag: "{{ group_docker_tags.back }}"
#  dataprovider:
#    # jdwp: 19045
#    tag: "{{ group_docker_tags.back }}"
#  processing:
#    # jdwp: 19046
#    tag: "{{ group_docker_tags.back }}"
#  worker_manager:
#    # jdwp: 19047
#    tag: "{{ group_docker_tags.back }}"
  front:
    protocol: http
    host: "{{ global_stack.master_node_host_name }}"
    port: 80
    tag: "{{ group_docker_tags.front }}"

# WORKERS
group_docker_workers: []

# COTS
group_docker_cots:
  elasticsearch:
    tag: "{{ group_docker_tags.cots }}"
#  kibana:
#    tag: "{{ group_docker_tags.cots }}"
#    http: 5601
  maildev:
    tag: "{{ group_docker_tags.cots }}"
    http: 5081
  postgres:
    tag: "{{ group_docker_tags.cots }}"
  phppgadmin:
    tag: "{{ group_docker_tags.cots }}"
    http: 5080
    db: 
      - name: Local BD
        host: rs-postgres
        port: 5432
    setting_owned_only: true
    setting_main_theme: 'default'
    setting_raw_rows: 100
    setting_raw_chars: 100
    setting_sidebar_left_width: 300
  rabbitmq:
    tag: "{{ group_docker_tags.cots }}"
    http: 15672
    client: 5672

# COTS configuration
group_docker_cots_configuration:
  postgres:
    nbTenant: 5
  elasticsearch:
    cluster_name: regards-{{ group_stack_name }}
  elasticsearch_logs:
    cluster_name: regards-{{ group_stack_name }}_logs


group_config_mservices:
  init_project: "{{ global_regards.project_name }}"
  access_token_validity: 2592000
  password_config:
    regex: ^.+$
    info: Password must contains at least 1 character
  instance_admin:
    username: "{{ global_regards.admin.login }}"
    password: "{{ global_regards.admin.password }}"
  proxy:
    url: "{{ global_proxy.url | default(false) }}"
    no_proxy: "{{ global_proxy.no_proxy | default(None) }}"
