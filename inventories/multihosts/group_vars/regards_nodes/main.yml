# Name of the stack to deploy in docker swarm
group_stack_name: regards
# Network disk shared accross every nodes
group_workdir_network: "{{ global_stack.networkdir }}"
# Do we allow root inside the network volume?
# When false => tree structure cannot be created and must exists before playbook execution
group_workdir_network_allow_root: true
# Everything stored in the workdir_local is not shared across swarm nodes. 
# We replicate everything on each swarm node to let microservice spawn whatever they want
group_workdir_local: "{{ global_stack.workdir }}"

group_setype: 'container_file_t'
group_seuser: 'system_u'

# Used to create folders that are not mounted into containers, but mappable by Docker
group_container_root_user: 'dockermapuid'
# When false, regards users creation need to be done externally
group_enable_setup_regards_users: true
group_container_root_group: 'gregards_admin'
# Used to create folders mounted by containers, all files created by containers will use this user
group_container_run_user: 'docker-regards-data'
group_container_run_group: 'gregards_data'
# When Docker user namespace is active, we substract from the run_user:run_group
# the shift we setup in Docker. It ensures that
# 1. containers are running with run_user:run_group on host server
# 2. inside containers, prevent privilege escalation as uid:gid are at least the Docker uid:gid shift
# When unactive, just provide run_user uid and run_group gid
group_container_run_uid: 3050
group_container_run_gid: 1050

group_docker_network_name: 'regards_{{ group_stack_name }}'
group_docker_network_ip_network: '10.11.7.'

group_docker_registry: ghcr.io/regardsoss

group_docker_tags:
  cots: '{{ global_regards.version }}'
  back: '{{ global_regards.version }}'
  front: '{{ global_regards.version }}'
  plugins: '{{ global_regards.version }}'

# Plugins
group_docker_plugins:
  - image: rs-download-metalink-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-download-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-fem-driver-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-stac-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-custom-command-file-validation-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-aip-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-postgresql-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-feature-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-webservice-datasource-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-local-storage-location
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-enhanced-descriptive-aip-generation-plugin
    tag: "{{ group_docker_tags.plugins }}"
  - image: rs-rabbitmq-sender-plugin
    tag: "{{ group_docker_tags.plugins }}"

# Stack
group_docker_mservices:
  config:
    tag: "{{ group_docker_tags.back }}"
  registry:
    tag: "{{ group_docker_tags.back }}"
  gateway:
    tag: "{{ group_docker_tags.back }}"
  admin_instance:
    tag: "{{ group_docker_tags.back }}"
  admin:
    tag: "{{ group_docker_tags.back }}"
  authentication:
    tag: "{{ group_docker_tags.back }}"
  dam:
    tag: "{{ group_docker_tags.back }}"
  catalog:
    tag: "{{ group_docker_tags.back }}"
  access_instance:
    tag: "{{ group_docker_tags.back }}"
  access_project:
    tag: "{{ group_docker_tags.back }}"
#  notifier:
#    tag: "{{ group_docker_tags.back }}"
#  fem:
#    tag: "{{ group_docker_tags.back }}"
#  storage:
#    tag: "{{ group_docker_tags.back }}"
#  order:
#    tag: "{{ group_docker_tags.back }}"
#  ingest:
#    tag: "{{ group_docker_tags.back }}"
#  dataprovider:
#    tag: "{{ group_docker_tags.back }}"
#  processing:
#    tag: "{{ group_docker_tags.back }}"
#  worker_manager:
#    tag: "{{ group_docker_tags.back }}"
  front:
    protocol: http
    host: "{{ global_stack.master_node_host_name }}"
    port: 80
    tag: "{{ group_docker_tags.front }}"

# WORKERS
group_docker_workers: []

# COTS
group_docker_cots:
  elasticsearch:
    tag: "{{ group_docker_tags.cots }}"
  elasticsearch_logs:
    tag: "{{ group_docker_tags.cots }}"
  kibana:
    tag: "{{ group_docker_tags.cots }}"
    http: 5601
  kibana_logs:
    tag: "{{ group_docker_tags.cots }}"
    http: 5602
  fluent:
    tag: "{{ group_docker_tags.cots }}"
  maildev:
    tag: "{{ group_docker_tags.cots }}"
    http: 5081
  postgres:
    tag: "{{ group_docker_tags.cots }}"
    node_label_placement_constraint:
      key: postgres
      value: indeed
  phppgadmin:
    tag: "{{ group_docker_tags.cots }}"
    http: 5080
  rabbitmq:
    tag: "{{ group_docker_tags.cots }}"
    http: 15672

# COTS configuration
group_docker_cots_configuration:
  postgres:
    nbTenant: 10
  elasticsearch:
    cluster_name: regards-{{ group_stack_name }}
  elasticsearch_logs:
    cluster_name: regards-{{ group_stack_name }}_logs


group_config_mservices:
  init_project: "{{ global_regards.project_name }}"
  access_token_validity: 2592000
  instance_admin:
    username: "{{ global_regards.admin.login }}"
    password: "{{ global_regards.admin.password }}"
  proxy:
    url: "{{ global_proxy.url | default(false) }}"
    no_proxy: "{{ global_proxy.no_proxy | default(None) }}"
