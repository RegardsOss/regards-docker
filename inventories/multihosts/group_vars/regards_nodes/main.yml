# Name of the stack to deploy in docker swarm
group_stack_name: regards
# Everything stored in the workdir_local is not shared across swarm nodes.
# We replicate everything on each swarm node to let microservice spawn whatever they want
group_workdir_local: "{{ global_stack.workdir }}"

group_setype: 'container_file_t'
group_seuser: 'system_u'

# Used to create folders that are not mounted into containers, but mappable by Docker
group_container_root_user: 'dockermapuid'
# When false, regards users creation need to be done externally
group_enable_setup_regards_users: true
group_container_root_group: 'gregards_admin'
# Used to create folders mounted by containers, all files created by containers will use this user
group_container_run_user: 'docker-regards-data'
group_container_run_group: 'gregards_data'
# When Docker user namespace is active, we substract from the run_user:run_group
# the shift we set up in Docker. It ensures that
# 1. containers are running with run_user:run_group on host server
# 2. inside containers, prevent privilege escalation as uid:gid are at least the Docker uid:gid shift
# When inactive, just provide run_user uid and run_group gid
group_container_run_uid: 3050
group_container_run_gid: 1050

group_docker_network_name: "regards_{{ group_stack_name }}"
group_docker_network_ip_network: "{{ regards_vault.group_docker_network_ip_network }}"

group_docker_registry: ghcr.io/regardsoss

# The domain used to access to current stack
group_docker_stack_domain: regards.fr

# Files have been moved from ./files/... to ../../static/...
group_docker_static_files_migrated: True

group_docker_tags:
  back: "{{ global_regards.version }}"
  workers: "{{ global_regards.version }}"
  plugins: "{{ global_regards.version }}"
  front: "{{ global_regards.version }}"
  cots: "{{ global_regards.version }}"

# Plugins
group_docker_plugins: []
  # - image: rs-aip-datasource-plugin
  #   tag: "{{ group_docker_tags.plugins }}"
  # - image: rs-feature-datasource-plugin
  #   tag: "{{ group_docker_tags.plugins }}"

# Stack
group_docker_mservices:
  config:
    tag: "{{ group_docker_tags.back }}"
  registry:
    tag: "{{ group_docker_tags.back }}"
  gateway:
    tag: "{{ group_docker_tags.back }}"
  admin_instance:
    tag: "{{ group_docker_tags.back }}"
  admin:
    tag: "{{ group_docker_tags.back }}"
  authentication:
    tag: "{{ group_docker_tags.back }}"
  dam:
    tag: "{{ group_docker_tags.back }}"
  catalog:
    tag: "{{ group_docker_tags.back }}"
  access_instance:
    tag: "{{ group_docker_tags.back }}"
  access_project:
    tag: "{{ group_docker_tags.back }}"
  front:
    protocol: https
    host: "{{ group_docker_stack_domain }}"
    port: 443
    rabbitmq_admin: 15672
    tag: "{{ group_docker_tags.front }}"
    ssl:
      crt: "{{ group_docker_stack_domain }}.crt"
      key: "{{ group_docker_stack_domain }}.key"

# WORKERS
group_docker_workers: []

# COTS
group_docker_cots:
  elasticsearch:
    tag: "{{ group_docker_tags.cots }}"
    node_label_placement_constraint:
      key: type
      value: node1
  phppgadmin:
    tag: "{{ group_docker_tags.cots }}"
    http: 5080
    db: 
      - name: fixme
        host: fixme
        port: 5432
        defaultdb: fixme
        theme: cappuccino
    setting_main_theme: cappuccino
  rabbitmq:
    tag: "{{ group_docker_tags.cots }}"
    # see https://regardsoss.github.io/docs/setup/swarm/advanced/rabbitmq#configure-admin
    user: regards
    password: "{{ regards_vault.group_docker_cots.rabbitmq.regards.password }}"
    global_service: true
    client_ssl: 5671
    # more configuration required:
    # ssl configuration: https://regardsoss.github.io/docs/setup/swarm/advanced/rabbitmq#with-tls
    node_label_placement_constraint:
      key: type
      value: node3
  elasticsearch_exporter:
    tag: "{{ group_docker_tags.cots }}"
  node_exporter:
    tag: "{{ group_docker_tags.cots }}"
    # Node exporter is a global service
  telegraf:
    tag: "{{ group_docker_tags.cots }}"
    # Telegraf is a global service
  prometheus:
    tag: "{{ group_docker_tags.cots }}"
    node_label_placement_constraint:
      key: type
      value: node1
  grafana:
    tag: "{{ group_docker_tags.cots }}"
    port: 3000
    host: "{{ group_docker_stack_domain }}"
    ssl:
      crt: "{{ group_docker_stack_domain }}.crt"
      key: "{{ group_docker_stack_domain }}.key"
    datasources:
      regards_cots:
        elasticsearch_indexes:
          - "{{ global_regards.project_name }}"
      custom:
        postgres:
          - name: fixme
            url: fixme
            user: fixme
            password: "{{ regards_vault.group_docker_cots.grafana.datasources.custom.postgres.foe_tenant.password }}"
            databases: 
              - fixme
    node_label_placement_constraint:
      key: type
      value: node3
  loki:
    tag: "{{ group_docker_tags.cots }}"
    node_label_placement_constraint:
      key: type
      value: node2
  kafka:
    tag: "{{ group_docker_tags.cots }}"
  fluentbit:
    tag: "{{ group_docker_tags.cots }}"
    # Fluentbit is a global service
  fluentd:
    tag: "{{ group_docker_tags.cots }}"

# COTS configuration
group_docker_cots_configuration:
  elasticsearch:
    cluster_name: regards
  rabbitmq:
    ssl:
      crt: "{{ group_docker_stack_domain }}.crt"
      key: "{{ group_docker_stack_domain }}.key"
      ca:  "{{ group_docker_stack_domain }}.ca.crt"

group_config_mservices:
  init_project: "{{ global_regards.project_name }}"
  mail:
    host: smtprelay.regards.fr
    port: 25
  access_token_validity: 2592000
  password_config:
    regex: ^.+$
    info: Password must contains at least 1 character
  instance_admin:
    username: "{{ global_regards.admin.login }}"
    password: "{{ regards_vault.group_config_mservices.instance_admin.password }}"
  # Token secret (REGARDS API and Orders direct download links) - (64 characters max)
  jwt_secret: "{{ regards_vault.group_config_mservices.authentication.jwt_secret }}"
  jwt_key_hs256: "{{ regards_vault.group_config_mservices.authentication.jwt_key_hs256 }}"
  jwt_key_hs384: "{{ regards_vault.group_config_mservices.authentication.jwt_key_hs384 }}"
  jwt_key_hs512: "{{ regards_vault.group_config_mservices.authentication.jwt_key_hs512 }}"
  order_jwt_secret: "{{ regards_vault.group_config_mservices.authentication.order_jwt_secret }}"
  # Password to crypt DB secret (16 characters max)
  cipher_iv: "{{ regards_vault.group_config_mservices.authentication.cipher_iv }}"
  proxy:
    url: "{{ global_proxy.url | default(false) }}"
    no_proxy: "{{ global_proxy.no_proxy | default(None) }}"
  amqp:
    user: "{{ group_docker_cots.rabbitmq.user }}"
    password: "{{ group_docker_cots.rabbitmq.password }}"
  postgres:
    # see https://regardsoss.github.io/docs/setup/swarm/advanced/postgres-database
    instance:
      host: fixme.regards.fr
      port: 5432
      user: fixme
      password: "{{ regards_vault.group_config_mservices.postgres.instance.password }}"
      db: fixme
    init_project:
      host: fixme
      port: fixme
      user: fixme
      password: "{{ regards_vault.group_config_mservices.postgres.init_project.password }}"
      db: fixme
