version: '3.9'

# Config name must contains less than 32 [a-zA-Z0-9-_.] caracters
configs:
  rs-rabbitmq_definitions.json:
    # Hacky solution: this file changes everytime a password inside this file is generated, so this is disconnected
    # from file change. Operators must use rabbitmq.manual_revision to make this config file refreshed
    name: rabbitmq_definitions_json_{{ role_regards_stack_rabbitmq_manual_revision }}
    file: {{ role_regards_stack_config }}rabbitmq/definitions_{{ role_regards_stack_rabbitmq_manual_revision }}.json
  rs-rabbitmq_rabbitmq.conf:
    name: rabbitmq_rabbitmq_conf_${CHECKSUM_RS_RABBITMQ_RABBITMQ_CONF}
    file: {{ role_regards_stack_config }}rabbitmq/rabbitmq.conf
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
  rs-rabbitmq_erlang_cookie:
    name: rabbitmq_erlang_cookie_${CHECKSUM_RS_RABBITMQ_ERLANG_COOKIE}
    file: {{ role_regards_stack_config }}rabbitmq/erlang.cookie
{% endif %}

{% if role_regards_stack_rabbitmq_ssl_active|bool %}
  rs-rabbitmq_ssl.ca:
    name: rabbitmq_ssl_ca_${CHECKSUM_RS_RABBITMQ_SSL_CA}
    file: {{ role_regards_stack_rabbitmq_folder_certificates }}{{ role_regards_stack_rabbitmq_ssl_certificates_conf.ca }}
  rs-rabbitmq_ssl.crt:
    name: rabbitmq_ssl_crt_${CHECKSUM_RS_RABBITMQ_SSL_CRT}
    file: {{ role_regards_stack_rabbitmq_folder_certificates }}{{ role_regards_stack_rabbitmq_ssl_certificates_conf.crt }}

secrets:
  rs-rabbitmq_ssl.key:
    name: rabbitmq_ssl_key_${CHECKSUM_RS_RABBITMQ_SSL_KEY}
    file: {{ role_regards_stack_rabbitmq_folder_certificates }}{{ role_regards_stack_rabbitmq_ssl_certificates_conf.key }}
{% endif %}
volumes:
  data-rabbitmq-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_rabbitmq_data.nfs is defined %}
{%   for nfs_server in role_regards_stack_top_level_nfs_servers %}
{%     if nfs_server.name == role_regards_stack_volume_rabbitmq_data.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_rabbitmq_data.get('device_postfix', 'rabbitmq') }}"
{%     endif %}
{%   endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}rabbitmq
{% endif %}

services:
  rs-rabbitmq:
    image: {{ role_regards_stack_registry }}/regards-messaging:{{ role_regards_stack_cots.rabbitmq.tag | default("latest") }}
{% if (role_regards_stack_cots.rabbitmq.configuration | default({})).labels is defined %}
    labels:
{%   for key, value in role_regards_stack_cots.rabbitmq.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{%   endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
    hostname: "rs-rabbitmq-{{ '{{' }}.Node.Hostname{{ '}}' }}"
{% else %}
    hostname: rs-rabbitmq
{% endif %}
    read_only: true
    stop_grace_period: 30m
{% if role_regards_stack_enable_cots_healthcheck %}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics --formatter=json is_booting | jq -r '.result' | grep true  || rabbitmq-diagnostics -q check_running"]
      interval: 5s
      timeout: 2m
      retries: 3
      start_period: 2h
{% endif %}
    volumes:
      - type: volume
        source: data-rabbitmq-datavolume
        target: /var/lib/rabbitmq/mnesia/
      - type: tmpfs
{% if role_regards_stack_cots.rabbitmq.get("legacy", True)|bool %}
        target: /var/log/rabbitmq/log/
{% else %}
        target: /var/log/rabbitmq/
{% endif %}
    configs:
      - source: rs-rabbitmq_definitions.json
        target: /etc/rabbitmq/definitions.json
      - source: rs-rabbitmq_rabbitmq.conf
        target: /etc/rabbitmq/rabbitmq.conf
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
      - source: rs-rabbitmq_erlang_cookie
        target: /var/lib/rabbitmq/.erlang.cookie
        uid: '{{ role_regards_stack_container_run_uid }}'
        gid: '{{ role_regards_stack_container_run_gid }}'
        mode: 0400
{% endif %}
{% if role_regards_stack_rabbitmq_ssl_active|bool %}
      - source: rs-rabbitmq_ssl.ca
        target: "/etc/ca-certificates/{{ role_regards_stack_rabbitmq_ssl_certificates_conf.ca }}"
      - source: rs-rabbitmq_ssl.crt
        target: "/etc/ca-certificates/{{ role_regards_stack_rabbitmq_ssl_certificates_conf.crt }}"
    secrets:
      - source: rs-rabbitmq_ssl.key
        target: "/etc/ca-certificates/{{ role_regards_stack_rabbitmq_ssl_certificates_conf.key }}"
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
{% if role_regards_stack_cots.rabbitmq.http is defined or role_regards_stack_cots.rabbitmq.client is defined or role_regards_stack_cots.rabbitmq.client_ssl is defined %}
    ports:
{%   if role_regards_stack_cots.rabbitmq.client is defined %}
      - "{{ role_regards_stack_cots.rabbitmq.client }}:5672"
{%   endif %}
{%   if role_regards_stack_cots.rabbitmq.http is defined %}
      - "{{ role_regards_stack_cots.rabbitmq.http }}:15672"
{%   endif %}
{%   if role_regards_stack_cots.rabbitmq.client_ssl is defined %}
      - "{{ role_regards_stack_cots.rabbitmq.client_ssl }}:5671"
{%   endif %}
{% endif %}
{% if role_regards_stack_cots.rabbitmq.node_label_placement_constraint is defined or role_regards_stack_cots.rabbitmq.global_service is defined or role_regards_stack_enable_cots_resource_limits %}
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
{%   if role_regards_stack_enable_cots_resource_limits %}
      resources:
        {{ role_regards_stack_resource_limits.rabbitmq | to_nice_yaml | indent(8) }}
{%   endif %}
{%   if role_regards_stack_cots.rabbitmq.global_service is defined %}
      mode: global
{%   endif %}
{%   if role_regards_stack_cots.rabbitmq.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_cots.rabbitmq.node_label_placement_constraint.key }} == {{ role_regards_stack_cots.rabbitmq.node_label_placement_constraint.value }}
{%   endif %}
{% endif %}
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
    environment:
      - RABBITMQ_USE_LONGNAME={{ role_regards_stack_config_rabbitmq_use_longname|bool | ternary('true', 'false') }}
{% endif %}
