version: '3.7'

# Config name must contains less than 32 [a-zA-Z0-9-_.] caracters
configs:
  rs-rabbitmq_definitions.json:
    # Hacky solution: this file changes everytime a password inside this file is generated, so this is disconnected
    # from file change. Operators must use rabbitmq.manual_reversion to make this config file refreshed
    name: rabbitmq_definitions_json_{{ role_regards_stack_rabbitmq_manual_reversion }}
    file: {{ role_regards_stack_config }}rabbitmq/definitions.json
  rs-rabbitmq_rabbitmq.conf:
    name: rabbitmq_rabbitmq_conf_${CHECKSUM_RS_RABBITMQ_RABBITMQ_CONF}
    file: {{ role_regards_stack_config }}rabbitmq/rabbitmq.conf

volumes:
  data-rabbitmq-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_rabbitmq_data.nfs is defined %}
      type: nfs
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_rabbitmq_data.nfs %}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_rabbitmq_data.get('device_postfix', 'rabbitmq') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}rabbitmq
{% endif %}

services:
  rs-rabbitmq:
    image: {{ role_regards_stack_registry }}/regards-messaging:{{ role_regards_stack_cots.rabbitmq.tag | default("latest") }}
{%if (role_regards_stack_cots.rabbitmq.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_cots.rabbitmq.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
    hostname: "rs-rabbitmq-{{ '{{' }}.Node.Hostname{{ '}}' }}"
{% else %}
    hostname: rs-rabbitmq
{% endif %}
    read_only: true
    volumes:
      - type: volume
        source: data-rabbitmq-datavolume
        target: /var/lib/rabbitmq/mnesia/
      - type: tmpfs
        target: /var/log/rabbitmq/log/
    configs:
      - source: rs-rabbitmq_definitions.json
        target: /etc/rabbitmq/definitions.json
      - source: rs-rabbitmq_rabbitmq.conf
        target: /etc/rabbitmq/rabbitmq.conf
    networks:
      - {{ role_regards_stack_docker_network_name }}
{% if role_regards_stack_cots.rabbitmq.http is defined or role_regards_stack_cots.rabbitmq.client is defined and role_regards_stack_cots.rabbitmq.global_service is defined == false %}
    ports:
{% if role_regards_stack_cots.rabbitmq.client is defined %}
      - "{{ role_regards_stack_cots.rabbitmq.client }}:5672"
{% endif %}
{% if role_regards_stack_cots.rabbitmq.http is defined %}
      - "{{ role_regards_stack_cots.rabbitmq.http }}:15672"
{% endif %}
{% endif %}
{% if role_regards_stack_cots.rabbitmq.node_label_placement_constraint is defined or role_regards_stack_cots.rabbitmq.global_service is defined %}
    deploy:
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
      mode: global
{% endif %}
{% if role_regards_stack_cots.rabbitmq.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_cots.rabbitmq.node_label_placement_constraint.key }} == {{ role_regards_stack_cots.rabbitmq.node_label_placement_constraint.value }}
{% endif %}
{% endif %}
{% if role_regards_stack_cots.rabbitmq.global_service is defined %}
    environment:
      - RABBITMQ_USE_LONGNAME=true
      - RABBITMQ_ERLANG_COOKIE={{ role_regards_stack_config_rabbitmq_erlang_cookie }}
{% endif %}
