version: '3.9'

{% if (role_regards_stack_mservices.front is defined and role_regards_stack_mservices.front.ssl is defined) %}
secrets:
{% if role_regards_stack_mservices.front is defined and role_regards_stack_mservices.front.ssl is defined %}
  front_ssl_key:
    name: front_ssl_key_${CHECKSUM_RS_FRONT_SSL_KEY}
    file: "{{ role_regards_stack_config }}regards/nginx/ssl/{{ role_regards_stack_mservices.front.ssl.key }}"
{% endif %}
{% endif %}

volumes:
################## DATA INPUTS ###################
{% for data_input in role_regards_stack_volume_data_inputs %}
  {{ data_input.name }}:
    driver: local
    driver_opts:
{% if data_input.get("local", False)|bool %}
      type: none
      o: bind
      device: {{ data_input.source }}
{% else %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == data_input.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ data_input.get('device_postfix','') }}"
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% if role_regards_stack_mservices.processing is defined %}
################## PROCESSING ###################
  processing-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_processing.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_processing.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_processing.get('device_postfix', 'regards/processing') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/processing
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.dam is defined %}
################## DAM STORAGE ###################
  dataset-attachments-storage-volume:
    driver: local
    driver_opts:
{%   if role_regards_stack_volume_dam_attachment_storage.nfs is defined %}
{%     for nfs_server in role_regards_stack_top_level_nfs_servers %}
{%       if nfs_server.name == role_regards_stack_volume_dam_attachment_storage.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_dam_attachment_storage.get('device_postfix', 'regards/storage/dam') }}"
{%       endif %}
{%     endfor %}
{%   else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/storage/dam
{%   endif %}
  dataset-attachments-input-volume:
    driver: local
    driver_opts:
{%   if role_regards_stack_volume_dam_attachment_input.nfs is defined %}
{%     for nfs_server in role_regards_stack_top_level_nfs_servers %}
{%       if nfs_server.name == role_regards_stack_volume_dam_attachment_input.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_dam_attachment_input.get('device_postfix', 'regards/storage/dataset-attachments-input') }}"
{%       endif %}
{%     endfor %}
{%   else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/storage/dataset-attachments-input
{%   endif %}
{% endif %}
####################### WORKSPACE ########################
  workspace-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_workspace.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_workspace.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_workspace.get('device_postfix', 'regards/workspace') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/workspace
{% endif %}
{% if role_regards_stack_mservices.storage is defined %}
################## STORAGE MICROSERVICE ###################
  online-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_storage_online.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_storage_online.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_storage_online.get('device_postfix', 'regards/storage/onlines') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/storage/onlines
{% endif %}

  cache-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_storage_cache.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_storage_cache.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_storage_cache.get('device_postfix', 'regards/storage/cache') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/storage/cache
{% endif %}
{% endif %}

############# MICROSERVICE LOGS FOLDER ##############
{% for mservice in role_regards_stack_volume_mservices_logs %}
  logs-{{ mservice }}-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_logs.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_logs.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_logs.get('device_postfix', 'regards/logs/') }}{{ mservice }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/logs/{{ mservice }}
{% endif %}
{% endfor %}

################## PLUGINS MICROSERVICE ###################

{% if role_regards_stack_mservices.authentication is defined %}
  authentication-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/authentication') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/authentication
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.catalog is defined %}
  catalog-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/catalog') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/catalog
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.dam is defined %}
  dam-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/dam') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/dam
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.dataprovider is defined %}
  dataprovider-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/dataprovider') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/dataprovider
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.fem is defined %}
  fem-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/fem') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/fem
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.ingest is defined %}
  ingest-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/ingest') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/ingest
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.notifier is defined %}
  notifier-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/notifier') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/notifier
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.processing is defined %}
  processing-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/processing') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/processing
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.storage is defined %}
  storage-plugins-datavolume:
    driver: local
    driver_opts:
{% if role_regards_stack_volume_plugins.nfs is defined %}
{% for nfs_server in role_regards_stack_top_level_nfs_servers %}
{% if nfs_server.name == role_regards_stack_volume_plugins.nfs %}
      type: {{ nfs_server.config.get('type', 'nfs') }}
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_stack_volume_plugins.get('device_postfix', 'regards/plugins/storage') }}"
{% endif %}
{% endfor %}
{% else %}
      type: none
      o: bind
      device: {{ role_regards_stack_workspace_local }}regards/plugins/storage
{% endif %}
{% endif %}




configs:
######################################################
################## Logback configs ###################
######################################################
{% if role_regards_stack_mservices.gateway is defined %}
  rs-gateway_logback.xml:
    name: gateway_logback_xml_${CHECKSUM_RS_GATEWAY_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}gateway/logback.xml
{% endif %}
{% if role_regards_stack_mservices.registry is defined %}
  rs-registry_logback.xml:
    name: registry_logback_xml_${CHECKSUM_RS_REGISTRY_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}registry/logback.xml
{% endif %}
{% if role_regards_stack_mservices.admin_instance is defined %}
  rs-admin-instance_logback.xml:
    name: admin_instance_logback_xml_${CHECKSUM_RS_ADMIN_INSTANCE_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}admin-instance/logback.xml
{% endif %}
{% if role_regards_stack_mservices.admin is defined %}
  rs-admin_logback.xml:
    name: admin_logback_xml_${CHECKSUM_RS_ADMIN_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}admin/logback.xml
{% endif %}
{% if role_regards_stack_mservices.authentication is defined %}
  rs-authentication_logback.xml:
    name: authentication_logback_xml_${CHECKSUM_RS_AUTHENTICATION_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}authentication/logback.xml
{% endif %}
  rs-config_logback.xml:
    name: config_logback_xml_${CHECKSUM_RS_CONFIG_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}config/logback.xml
{% if role_regards_stack_mservices.dam is defined %}
  rs-dam_logback.xml:
    name: dam_logback_xml_${CHECKSUM_RS_DAM_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}dam/logback.xml
{% endif %}
{% if role_regards_stack_mservices.notifier is defined %}
  rs-notifier_logback.xml:
    name: notifier_logback_xml_${CHECKSUM_RS_NOTIFIER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}notifier/logback.xml
{% endif %}
{% if role_regards_stack_mservices.fem is defined %}
  rs-fem_logback.xml:
    name: fem_logback_xml_${CHECKSUM_RS_FEM_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}fem/logback.xml
{% endif %}
{% if role_regards_stack_mservices.catalog is defined %}
  rs-catalog_logback.xml:
    name: catalog_logback_xml_${CHECKSUM_RS_CATALOG_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}catalog/logback.xml
{% endif %}
{% if role_regards_stack_mservices.access_instance is defined %}
  rs-access-instance_logback.xml:
    name: access_instance_logback_xml_${CHECKSUM_RS_ACCESS_INSTANCE_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}access-instance/logback.xml
{% endif %}
{% if role_regards_stack_mservices.access_project is defined %}
  rs-access-project_logback.xml:
    name: access_project_logback_xml_${CHECKSUM_RS_ACCESS_PROJECT_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}access-project/logback.xml
{% endif %}
{% if role_regards_stack_mservices.order is defined %}
  rs-order_logback.xml:
    name: order_logback_xml_${CHECKSUM_RS_ORDER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}order/logback.xml
{% endif %}
{% if role_regards_stack_mservices.processing is defined %}
  rs-processing_logback.xml:
    name: processing_logback_xml_${CHECKSUM_RS_PROCESSING_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}processing/logback.xml
{% endif %}
{% if role_regards_stack_mservices.storage is defined %}
  rs-storage_logback.xml:
    name: storage_logback_xml_${CHECKSUM_RS_STORAGE_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}storage/logback.xml
{% endif %}
{% if role_regards_stack_mservices.ingest is defined %}
  rs-ingest_logback.xml:
    name: ingest_logback_xml_${CHECKSUM_RS_INGEST_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}ingest/logback.xml
{% endif %}
{% if role_regards_stack_mservices.dataprovider is defined %}
  rs-dataprovider_logback.xml:
    name: dataprovider_logback_xml_${CHECKSUM_RS_DATAPROVIDER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}dataprovider/logback.xml
{% endif %}
{% if role_regards_stack_mservices.worker_manager is defined %}
  rs-worker-manager_logback.xml:
    name: worker_manager_logback_xml_${CHECKSUM_RS_WORKER_MANAGER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}worker-manager/logback.xml
{% endif %}
{% if role_regards_stack_mservices.lta_manager is defined %}
  rs-lta-manager_logback.xml:
    name: lta_manager_logback_xml_${CHECKSUM_RS_LTA_MANAGER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}lta-manager/logback.xml
{% endif %}
{% if role_regards_stack_mservices.delivery is defined %}
  rs-delivery_logback.xml:
    name: delivery_logback_xml_${CHECKSUM_RS_DELIVERY_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}delivery/logback.xml
{% endif %}
{% if role_regards_stack_mservices.file_catalog is defined %}
  rs-file-catalog_logback.xml:
    name: file_catalog_logback_xml_${CHECKSUM_RS_FILE_CATALOG_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}file-catalog/logback.xml
{% endif %}
{% if role_regards_stack_mservices.file_access is defined %}
  rs-file-access_logback.xml:
    name: file_access_logback_xml_${CHECKSUM_RS_FILE_ACCESS_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}file-access/logback.xml
{% endif %}
{% if role_regards_stack_mservices.file_packager is defined %}
  rs-file-packager_logback.xml:
    name: file_packager_logback_xml_${CHECKSUM_RS_FILE_PACKAGER_LOGBACK_XML}
    file: {{ role_regards_stack_logback }}file-packager/logback.xml
{% endif %}

############################################################
################## Microservices configs ###################
############################################################

  rs_ms_application.properties:
    name: rs_ms_application_properties_${CHECKSUM_RS_MS_APPLICATION_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/application.properties
{% if role_regards_stack_mservices.access_instance is defined %}
  rs_ms_access-instance.properties:
    name: rs_ms_access_inst_properties_${CHECKSUM_RS_MS_ACCESS_INSTANCE_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-access-instance.properties
{% endif %}
{% if role_regards_stack_mservices.access_project is defined %}
  rs_ms_access-project.properties:
    name: rs_ms_access_pro_properties_${CHECKSUM_RS_MS_ACCESS_PROJECT_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-access-project.properties
{% endif %}
{% if role_regards_stack_mservices.admin_instance is defined %}
  rs_ms_admin_instance.properties:
    name: rs_ms_admin_inst_properties_${CHECKSUM_RS_MS_ADMIN_INSTANCE_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-admin-instance.properties
{% endif %}
{% if role_regards_stack_mservices.admin is defined %}
  rs_ms_admin.properties:
    name: rs_ms_admin_properties_${CHECKSUM_RS_MS_ADMIN_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-admin.properties
{% endif %}
{% if role_regards_stack_mservices.authentication is defined %}
  rs_ms_authentication.properties:
    name: rs_ms_authenti_properties_${CHECKSUM_RS_MS_AUTHENTICATION_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-authentication.properties
{% endif %}
{% if role_regards_stack_mservices.catalog is defined %}
  rs_ms_catalog.properties:
    name: rs_ms_catalog_properties_${CHECKSUM_RS_MS_CATALOG_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-catalog.properties
{% endif %}
{% if role_regards_stack_mservices.dam is defined %}
  rs_ms_dam.properties:
    name: rs_ms_dam_props_${CHECKSUM_RS_MS_DAM_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-dam.properties
{% endif %}
{% if role_regards_stack_mservices.dataprovider is defined %}
  rs_ms_dataprovider.properties:
    name: rs_ms_dataprovider_properties_${CHECKSUM_RS_MS_DATAPROVIDER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-dataprovider.properties
{% endif %}
{% if role_regards_stack_mservices.fem is defined %}
  rs_ms_fem.properties:
    name: rs_ms_fem_properties_${CHECKSUM_RS_MS_FEM_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-fem.properties
{% endif %}
{% if role_regards_stack_mservices.gateway is defined %}
  rs_ms_gateway.properties:
    name: rs_ms_gateway_properties_${CHECKSUM_RS_MS_GATEWAY_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-gateway.properties
{% endif %}
{% if role_regards_stack_mservices.ingest is defined %}
  rs_ms_ingest.properties:
    name: rs_ms_ingest_properties_${CHECKSUM_RS_MS_INGEST_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-ingest.properties
{% endif %}
{% if role_regards_stack_mservices.lta_manager is defined %}
  rs_ms_lta-manager.properties:
    name: rs_ms_lta_manager_properties_${CHECKSUM_RS_MS_LTA_MANAGER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-lta-manager.properties
{% endif %}
{% if role_regards_stack_mservices.delivery is defined %}
  rs_ms_delivery.properties:
    name: rs_ms_delivery_properties_${CHECKSUM_RS_MS_DELIVERY_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-delivery.properties
{% endif %}
{% if role_regards_stack_mservices.notifier is defined %}
  rs_ms_notifier.properties:
    name: rs_ms_notifier_properties_${CHECKSUM_RS_MS_NOTIFIER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-notifier.properties
{% endif %}
{% if role_regards_stack_mservices.order is defined %}
  rs_ms_order.properties:
    name: rs_ms_order_properties_${CHECKSUM_RS_MS_ORDER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-order.properties
{% endif %}
{% if role_regards_stack_mservices.processing is defined %}
  rs_ms_processing.properties:
    name: rs_ms_processing_properties_${CHECKSUM_RS_MS_PROCESSING_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-processing.properties
{% endif %}
{% if role_regards_stack_mservices.registry is defined %}
  rs_ms_registry.properties:
    name: rs_ms_registry_properties_${CHECKSUM_RS_MS_REGISTRY_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-registry.properties
{% endif %}
{% if role_regards_stack_mservices.storage is defined %}
  rs_ms_storage.properties:
    name: rs_ms_storage_properties_${CHECKSUM_RS_MS_STORAGE_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-storage.properties
{% endif %}
{% if role_regards_stack_mservices.worker_manager is defined %}
  rs_ms_worker-manager.properties:
    name: rs_ms_worker_manager_properties_${CHECKSUM_RS_MS_WORKER_MANAGER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-worker-manager.properties
{% endif %}
{% if role_regards_stack_mservices.file_catalog is defined %}
  rs_ms_file-catalog.properties:
    name: rs_ms_file_catalog_properties_${CHECKSUM_RS_MS_FILE_CATALOG_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-file-catalog.properties
{% endif %}
{% if role_regards_stack_mservices.file_access is defined %}
  rs_ms_file-access.properties:
    name: rs_ms_file_access_properties_${CHECKSUM_RS_MS_FILE_ACCESS_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-file-access.properties
{% endif %}
{% if role_regards_stack_mservices.file_packager is defined %}
  rs_ms_file-packager.properties:
    name: rs_ms_file_packager_properties_${CHECKSUM_RS_MS_FILE_PACKAGER_PROPERTIES}
    file: {{ role_regards_stack_config }}regards/config/regards-oss-backend/rs-file-packager.properties
{% endif %}

#############################################
################ WORKER #####################
#############################################

{% if role_regards_stack_workers|length %}
  rs_workers_application.yml:
    name: rs_workers_app_yml_${CHECKSUM_RS_WORKERS_APPLICATION_YML}
    file: {{ role_regards_stack_config }}regards/config/regards-workers/application.yml
{% endif %}
{% for worker in role_regards_stack_workers %}
{% if worker.config is defined %}
  rs_conf_{{ worker.name }}.yml:
    name: rs_conf_${CHECKSUM_WORKER_{{ worker.name | hash('sha1') }}_YML}
    file: {{ role_regards_stack_config }}regards/config/regards-workers/{{ worker.name }}.yml
{% endif %}
{% endfor %}

################ CERTS #####################

{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
  ca_cert_{{ file.split('.') | first }}:
    name: ca_cert_${CHECKSUM_CA_CERT_{{ file | hash('sha1') }}}
    file: "{{ role_regards_stack_config }}regards/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}

###############################################
################## FRONTEND ###################
###############################################

{% if role_regards_stack_mservices.front is defined %}
  rs-front_nginx.conf:
    name: front_nginx.conf_${CHECKSUM_RS_FRONT_NGINX_CONF}
    file: {{ role_regards_stack_config }}regards/nginx/nginx.conf
{% if role_regards_stack_front_securised|bool %}
  rs-front_regards.conf:
    name: front_regards.conf_${CHECKSUM_RS_FRONT_REGARDS_CONF}
    file: {{ role_regards_stack_config }}regards/nginx/regards.conf
{% if role_regards_stack_front_has_rabbitmq_admin|bool %}
  rs-front_rabbitmq.conf:
    name: front_regards.conf_${CHECKSUM_RS_FRONT_RABBITMQ_CONF}
    file: {{ role_regards_stack_config }}/regards/nginx/rabbitmq.conf
{% endif %}
{% if role_regards_stack_mservices.front.ssl is defined %}
  rs-front_badhost.conf:
    name: front_regards.conf_${CHECKSUM_RS_FRONT_BADHOST_CONF}
    file: {{ role_regards_stack_config }}regards/nginx/badhost.conf
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.front.show_footer|default(false)|bool %}
  rs-front_version_footer.html:
    name: front_version_footer_html_${CHECKSUM_RS_FRONT_VERSION_FOOTER_HTML}
    file: {{ role_regards_stack_config }}regards/nginx/footer/regards-version-footer.html
  rs-front_footer_cnes_logo.png:
    name: front_version_footer_html_${CHECKSUM_RS_FRONT_FOOTER_CNES_LOGO_PNG}
    file: {{ role_regards_stack_config }}regards/nginx/footer/imgs/CNES_Logo_Blanc_Horizontal.png
  rs-front_footer_Regards.png:
    name: front_version_footer_html_${CHECKSUM_RS_FRONT_FOOTER_REGARDS_PNG}
    file: {{ role_regards_stack_config }}regards/nginx/footer/imgs/Regards.png
{% endif %}
{% if role_regards_stack_mservices.front.ssl is defined %}
  front_ssl_crt:
    name: front_ssl_crt_${CHECKSUM_RS_FRONT_SSL_CRT}
    file: "{{ role_regards_stack_config }}regards/nginx/ssl/{{ role_regards_stack_mservices.front.ssl.crt }}"
{% endif %}
{% endif %}

services:
{% if role_regards_stack_mservices.config is defined %}
  rs-config:
    image: {{ role_regards_stack_registry }}/rs-config:{{ role_regards_stack_mservices.config.tag }}
{% if (role_regards_stack_mservices.config.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.config.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-config
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9031/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 1m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.config | to_nice_yaml | indent(8) }}
{% if role_regards_stack_mservices.config.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.config.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.config.node_label_placement_constraint.value }}
{% endif %}
    networks: 
      - {{ role_regards_stack_docker_network_name }}
{% if role_regards_stack_mservices.config.http is defined %}
    ports:
      - "{{ role_regards_stack_mservices.config.http }}:9031"
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.config.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

    volumes:
      - type: volume
        source: logs-config-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-config_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /config/regards/regards-oss-backend/application.properties
{% if role_regards_stack_mservices.access_instance is defined %}
      - source: rs_ms_access-instance.properties
        target: /config/regards/regards-oss-backend/rs-access-instance.properties
{% endif %}
{% if role_regards_stack_mservices.access_project is defined %}
      - source: rs_ms_access-project.properties
        target: /config/regards/regards-oss-backend/rs-access-project.properties
{% endif %}
{% if role_regards_stack_mservices.admin_instance is defined %}
      - source: rs_ms_admin_instance.properties
        target: /config/regards/regards-oss-backend/rs-admin-instance.properties
{% endif %}
{% if role_regards_stack_mservices.admin is defined %}
      - source: rs_ms_admin.properties
        target: /config/regards/regards-oss-backend/rs-admin.properties
{% endif %}
{% if role_regards_stack_mservices.authentication is defined %}
      - source: rs_ms_authentication.properties
        target: /config/regards/regards-oss-backend/rs-authentication.properties
{% endif %}
{% if role_regards_stack_mservices.catalog is defined %}
      - source: rs_ms_catalog.properties
        target: /config/regards/regards-oss-backend/rs-catalog.properties
{% endif %}
{% if role_regards_stack_mservices.dam is defined %}
      - source: rs_ms_dam.properties
        target: /config/regards/regards-oss-backend/rs-dam.properties
{% endif %}
{% if role_regards_stack_mservices.dataprovider is defined %}
      - source: rs_ms_dataprovider.properties
        target: /config/regards/regards-oss-backend/rs-dataprovider.properties
{% endif %}
{% if role_regards_stack_mservices.fem is defined %}
      - source: rs_ms_fem.properties
        target: /config/regards/regards-oss-backend/rs-fem.properties
{% endif %}
{% if role_regards_stack_mservices.gateway is defined %}
      - source: rs_ms_gateway.properties
        target: /config/regards/regards-oss-backend/rs-gateway.properties
{% endif %}
{% if role_regards_stack_mservices.ingest is defined %}
      - source: rs_ms_ingest.properties
        target: /config/regards/regards-oss-backend/rs-ingest.properties
{% endif %}
{% if role_regards_stack_mservices.lta_manager is defined %}
      - source: rs_ms_lta-manager.properties
        target: /config/regards/regards-oss-backend/rs-lta-manager.properties
{% endif %}
{% if role_regards_stack_mservices.delivery is defined %}
      - source: rs_ms_delivery.properties
        target: /config/regards/regards-oss-backend/rs-delivery.properties
{% endif %}
{% if role_regards_stack_mservices.notifier is defined %}
      - source: rs_ms_notifier.properties
        target: /config/regards/regards-oss-backend/rs-notifier.properties
{% endif %}
{% if role_regards_stack_mservices.order is defined %}
      - source: rs_ms_order.properties
        target: /config/regards/regards-oss-backend/rs-order.properties
{% endif %}
{% if role_regards_stack_mservices.processing is defined %}
      - source: rs_ms_processing.properties
        target: /config/regards/regards-oss-backend/rs-processing.properties
{% endif %}
{% if role_regards_stack_mservices.registry is defined %}
      - source: rs_ms_registry.properties
        target: /config/regards/regards-oss-backend/rs-registry.properties
{% endif %}
{% if role_regards_stack_mservices.storage is defined %}
      - source: rs_ms_storage.properties
        target: /config/regards/regards-oss-backend/rs-storage.properties
{% endif %}
{% if role_regards_stack_mservices.worker_manager is defined %}
      - source: rs_ms_worker-manager.properties
        target: /config/regards/regards-oss-backend/rs-worker-manager.properties
{% endif %}
{% if role_regards_stack_mservices.file_catalog is defined %}
      - source: rs_ms_file-catalog.properties
        target: /config/regards/regards-oss-backend/rs-file-catalog.properties
{% endif %}
{% if role_regards_stack_mservices.file_access is defined %}
      - source: rs_ms_file-access.properties
        target: /config/regards/regards-oss-backend/rs-file-access.properties
{% endif %}
{% if role_regards_stack_mservices.file_packager is defined %}
      - source: rs_ms_file-packager.properties
        target: /config/regards/regards-oss-backend/rs-file-packager.properties
{% endif %}
{% if role_regards_stack_workers|length %}
      - source: rs_workers_application.yml
        target: /config/regards/regards-workers/application.yml
{% endif %}
{% for worker in role_regards_stack_workers %}
{% if worker.config is defined %}
      - source: rs_conf_{{ worker.name }}.yml
        target: /config/regards/regards-workers/{{ worker.name }}.yml
{% endif %}
{% endfor %}
{% if role_regards_stack_mservices.config.configs is defined %}
{% for config in role_regards_stack_mservices.config.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.config.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.config.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.registry is defined %}
  # Eureka
  rs-registry:
    image: {{ role_regards_stack_registry }}/rs-registry:{{ role_regards_stack_mservices.registry.tag }}
{% if (role_regards_stack_mservices.registry.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.registry.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-registry
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9032/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 2m
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.registry.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.registry | to_nice_yaml | indent(8) }}
{% if role_regards_stack_mservices.registry.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.registry.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.registry.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    volumes:
      - type: volume
        source: logs-registry-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-registry_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_registry.properties
        target: /tmp/rs-registry.properties
{% if role_regards_stack_mservices.registry.configs is defined %}
{% for config in role_regards_stack_mservices.registry.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.registry.http is defined or role_regards_stack_mservices.registry.jdwp is defined or role_regards_stack_mservices.registry.jmx is defined or role_regards_stack_mservices.registry.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.registry.http is defined %}
      - "{{ role_regards_stack_mservices.registry.http }}:9032"
{% endif %}
{% if role_regards_stack_mservices.registry.jdwp is defined %}
      - "{{ role_regards_stack_mservices.registry.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.registry.jmx is defined %}
      - "{{ role_regards_stack_mservices.registry.jmx }}:19032"
{% endif %}
{% if role_regards_stack_mservices.registry.yourkit is defined %}
      - "{{ role_regards_stack_mservices.registry.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.registry.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.registry.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.gateway is defined %}
  # Spring cloud gateway
  rs-gateway:
    image: {{ role_regards_stack_registry }}/rs-gateway:{{ role_regards_stack_mservices.gateway.tag }}
{% if (role_regards_stack_mservices.gateway.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.gateway.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-gateway
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9030/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.gateway | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.gateway.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.gateway.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.gateway.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.gateway.node_label_placement_constraint.value }}
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.gateway.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.gateway.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.gateway.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    networks:
      {{ role_regards_stack_docker_network_name }}:
{% if (role_regards_stack_mservices.gateway.configuration | default({})).external_networks is defined %}
{% for external_network in role_regards_stack_mservices.gateway.configuration.external_networks %}
      {{ external_network.network }}:
{% if external_network.aliases is defined %}
        aliases:
{% for alias in external_network.aliases %}
          - {{ alias }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    volumes:
      - type: volume
        source: logs-gateway-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-gateway_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_gateway.properties
        target: /tmp/rs-gateway.properties
{% if role_regards_stack_mservices.gateway.configs is defined %}
{% for config in role_regards_stack_mservices.gateway.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.gateway.http is defined or role_regards_stack_mservices.gateway.jdwp is defined or role_regards_stack_mservices.gateway.jmx is defined or role_regards_stack_mservices.gateway.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.gateway.http is defined %}
      - "{{ role_regards_stack_mservices.gateway.http }}:9030"
{% endif %}
{% if role_regards_stack_mservices.gateway.jdwp is defined %}
      - "{{ role_regards_stack_mservices.gateway.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.gateway.jmx is defined %}
      - "{{ role_regards_stack_mservices.gateway.jmx }}:18030"
{% endif %}
{% if role_regards_stack_mservices.gateway.yourkit is defined %}
      - "{{ role_regards_stack_mservices.gateway.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.gateway.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.gateway.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.admin_instance is defined %}
  rs-admin-instance:
    image: {{ role_regards_stack_registry }}/{{ role_regards_stack_mservices_admin_instance_image_name }}:{{ role_regards_stack_mservices.admin_instance.tag }}
{% if (role_regards_stack_mservices.admin_instance.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.admin_instance.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-admin-instance
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9037/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.admin_instance | to_nice_yaml | indent(8) }}
{% if role_regards_stack_mservices.admin_instance.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.admin_instance.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.admin_instance.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.admin_instance.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.admin_instance.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.admin_instance.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
      - type: volume
        source: logs-admin-instance-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-admin-instance_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_admin_instance.properties
        target: /tmp/rs-admin-instance.properties
{% if role_regards_stack_mservices.admin_instance.configs is defined %}
{% for config in role_regards_stack_mservices.admin_instance.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.admin_instance.http is defined or role_regards_stack_mservices.admin_instance.jdwp is defined or role_regards_stack_mservices.admin_instance.jmx is defined or role_regards_stack_mservices.admin_instance.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.admin_instance.http is defined %}
      - "{{ role_regards_stack_mservices.admin_instance.http }}:9037"
{% endif %}
{% if role_regards_stack_mservices.admin_instance.jdwp is defined %}
      - "{{ role_regards_stack_mservices.admin_instance.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.admin_instance.jmx is defined %}
      - "{{ role_regards_stack_mservices.admin_instance.jmx }}:18037"
{% endif %}
{% if role_regards_stack_mservices.admin_instance.yourkit is defined %}
      - "{{ role_regards_stack_mservices.admin_instance.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.admin_instance.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.admin_instance.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.admin is defined %}
  rs-admin:
    image: {{ role_regards_stack_registry }}/{{ role_regards_stack_mservices_admin_image_name  }}:{{ role_regards_stack_mservices.admin.tag }}
{% if (role_regards_stack_mservices.admin.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.admin.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-admin
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9033/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.admin | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.admin.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.admin.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.admin.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.admin.node_label_placement_constraint.value }}
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.admin.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.admin.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.admin.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    volumes:
      - type: volume
        source: logs-admin-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-admin_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_admin.properties
        target: /tmp/rs-admin.properties
{% if role_regards_stack_mservices.admin.configs is defined %}
{% for config in role_regards_stack_mservices.admin.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.admin.http is defined or role_regards_stack_mservices.admin.jdwp is defined or role_regards_stack_mservices.admin.jmx is defined or role_regards_stack_mservices.admin.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.admin.http is defined %}
      - "{{ role_regards_stack_mservices.admin.http }}:9033"
{% endif %}
{% if role_regards_stack_mservices.admin.jdwp is defined %}
      - "{{ role_regards_stack_mservices.admin.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.admin.jmx is defined %}
      - "{{ role_regards_stack_mservices.admin.jmx }}:18033"
{% endif %}
{% if role_regards_stack_mservices.admin.yourkit is defined %}
      - "{{ role_regards_stack_mservices.admin.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.admin.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.admin.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.authentication is defined %}
  rs-authentication:
    image: {{ role_regards_stack_registry }}/rs-authentication:{{ role_regards_stack_mservices.authentication.tag }}
{% if (role_regards_stack_mservices.authentication.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.authentication.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-authentication
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9034/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.authentication | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.authentication.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.authentication.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.authentication.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.authentication.node_label_placement_constraint.value }}
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.authentication.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.authentication.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.authentication.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    networks:
      {{ role_regards_stack_docker_network_name }}:
{% if (role_regards_stack_mservices.authentication.configuration | default({})).external_networks is defined %}
{% for external_network in role_regards_stack_mservices.authentication.configuration.external_networks %}
      {{ external_network.network }}:
{% if external_network.aliases is defined %}
        aliases:
{% for alias in external_network.aliases %}
          - {{ alias }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    volumes:
      - type: volume
        source: authentication-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-authentication-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-authentication_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_authentication.properties
        target: /tmp/rs-authentication.properties
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.authentication.configs is defined %}
{% for config in role_regards_stack_mservices.authentication.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.authentication.http is defined or role_regards_stack_mservices.authentication.jdwp is defined or role_regards_stack_mservices.authentication.jmx is defined or role_regards_stack_mservices.authentication.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.authentication.http is defined %}
      - "{{ role_regards_stack_mservices.authentication.http }}:9034"
{% endif %}
{% if role_regards_stack_mservices.authentication.jdwp is defined %}
      - "{{ role_regards_stack_mservices.authentication.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.authentication.jmx is defined %}
      - "{{ role_regards_stack_mservices.authentication.jmx }}:18034"
{% endif %}
{% if role_regards_stack_mservices.authentication.yourkit is defined %}
      - "{{ role_regards_stack_mservices.authentication.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.authentication.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.authentication.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.dam is defined %}
  rs-dam:
    image: {{ role_regards_stack_registry }}/rs-dam:{{ role_regards_stack_mservices.dam.tag }}
{% if (role_regards_stack_mservices.dam.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.dam.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-dam
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9035/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 8m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.dam | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.dam.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.dam.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.dam.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.dam.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment: 
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.dam.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.dam.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.dam.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
{% if role_regards_stack_mservices.dam.volumes is defined %}
{% for volume in role_regards_stack_mservices.dam.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: dam-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-dam-datavolume
        target: /logs
      - type: volume
        source: dataset-attachments-storage-volume
        target: /storage
      - type: volume
        source: dataset-attachments-input-volume
        target: /dataset-attachments-input
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-dam_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_dam.properties
        target: /tmp/rs-dam.properties
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.dam.configs is defined %}
{% for config in role_regards_stack_mservices.dam.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.dam.http is defined or role_regards_stack_mservices.dam.jdwp is defined or role_regards_stack_mservices.dam.jmx is defined or role_regards_stack_mservices.dam.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.dam.http is defined %}
      - "{{ role_regards_stack_mservices.dam.http }}:9035"
{% endif %}
{% if role_regards_stack_mservices.dam.jdwp is defined %}
      - "{{ role_regards_stack_mservices.dam.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.dam.jmx is defined %}
      - "{{ role_regards_stack_mservices.dam.jmx }}:18035"
{% endif %}
{% if role_regards_stack_mservices.dam.yourkit is defined %}
      - "{{ role_regards_stack_mservices.dam.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.dam.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.dam.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.notifier is defined %}
  rs-notifier:
    image: {{ role_regards_stack_registry }}/rs-notifier:{{ role_regards_stack_mservices.notifier.tag }}
{% if (role_regards_stack_mservices.notifier.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.notifier.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-notifier
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9039/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.notifier | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.notifier.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.notifier.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.notifier.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.notifier.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.notifier.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.notifier.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.notifier.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
      - type: volume
        source: notifier-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-notifier-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-notifier_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_notifier.properties
        target: /tmp/rs-notifier.properties
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.notifier.configs is defined %}
{% for config in role_regards_stack_mservices.notifier.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.notifier.http is defined or role_regards_stack_mservices.notifier.jdwp is defined or role_regards_stack_mservices.notifier.jmx is defined or role_regards_stack_mservices.notifier.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.notifier.http is defined %}
      - "{{ role_regards_stack_mservices.notifier.http }}:9039"
{% endif %}
{% if role_regards_stack_mservices.notifier.jdwp is defined %}
      - "{{ role_regards_stack_mservices.notifier.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.notifier.jmx is defined %}
      - "{{ role_regards_stack_mservices.notifier.jmx }}:18039"
{% endif %}
{% if role_regards_stack_mservices.notifier.yourkit is defined %}
      - "{{ role_regards_stack_mservices.notifier.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.notifier.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.notifier.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.fem is defined %}
  rs-fem:
    image: {{ role_regards_stack_registry }}/rs-fem:{{ role_regards_stack_mservices.fem.tag }}
{% if (role_regards_stack_mservices.fem.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.fem.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-fem
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9038/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.fem | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.fem.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.fem.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.fem.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.fem.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.fem.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.fem.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.fem.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
{% if role_regards_stack_mservices.fem.volumes is defined %}
{% for volume in role_regards_stack_mservices.fem.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: fem-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-fem-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-fem_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_fem.properties
        target: /tmp/rs-fem.properties
{% if role_regards_stack_mservices.fem.configs is defined %}
{% for config in role_regards_stack_mservices.fem.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.fem.http is defined or role_regards_stack_mservices.fem.jdwp is defined or role_regards_stack_mservices.fem.jmx is defined or role_regards_stack_mservices.fem.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.fem.http is defined %}
      - "{{ role_regards_stack_mservices.fem.http }}:9038"
{% endif %}
{% if role_regards_stack_mservices.fem.jdwp is defined %}
      - "{{ role_regards_stack_mservices.fem.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.fem.jmx is defined %}
      - "{{ role_regards_stack_mservices.fem.jmx }}:18038"
{% endif %}
{% if role_regards_stack_mservices.fem.yourkit is defined %}
      - "{{ role_regards_stack_mservices.fem.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.fem.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.fem.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.catalog is defined %}
  rs-catalog:
    image: {{ role_regards_stack_registry }}/rs-catalog:{{ role_regards_stack_mservices.catalog.tag }}
{% if (role_regards_stack_mservices.catalog.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.catalog.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-catalog
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9036/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.catalog | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.catalog.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.catalog.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.catalog.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.catalog.node_label_placement_constraint.value }}
{% endif %}
    networks:
      {{ role_regards_stack_docker_network_name }}:
{% if (role_regards_stack_mservices.catalog.configuration | default({})).external_networks is defined %}
{% for external_network in role_regards_stack_mservices.catalog.configuration.external_networks %}
      {{ external_network.network }}:
{% if external_network.aliases is defined %}
        aliases:
{% for alias in external_network.aliases %}
          - {{ alias }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.catalog.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.catalog.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.catalog.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
      - type: volume
        source: catalog-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-catalog-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-catalog_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_catalog.properties
        target: /tmp/rs-catalog.properties
{% if role_regards_stack_mservices.catalog.configs is defined %}
{% for config in role_regards_stack_mservices.catalog.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.catalog.http is defined or role_regards_stack_mservices.catalog.jdwp is defined or role_regards_stack_mservices.catalog.jmx is defined or role_regards_stack_mservices.catalog.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.catalog.http is defined %}
      - "{{ role_regards_stack_mservices.catalog.http }}:9036"
{% endif %}
{% if role_regards_stack_mservices.catalog.jdwp is defined %}
      - "{{ role_regards_stack_mservices.catalog.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.catalog.jmx is defined %}
      - "{{ role_regards_stack_mservices.catalog.jmx }}:18036"
{% endif %}
{% if role_regards_stack_mservices.catalog.yourkit is defined %}
      - "{{ role_regards_stack_mservices.catalog.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.catalog.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.catalog.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.access_instance is defined %}
  rs-access-instance:
    image: {{ role_regards_stack_registry }}/{{ role_regards_stack_mservices_access_instance_image_name }}:{{ role_regards_stack_mservices.access_instance.tag }}
{% if (role_regards_stack_mservices.access_instance.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.access_instance.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-access-instance
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9040/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 6m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.access_instance | to_nice_yaml | indent(8) }}
{% if role_regards_stack_mservices.access_instance.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.access_instance.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.access_instance.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.access_instance.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.access_instance.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.access_instance.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
      - type: volume
        source: logs-access-instance-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-access-instance_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_access-instance.properties
        target: /tmp/rs-access-instance.properties
{% if role_regards_stack_mservices.access_instance.configs is defined %}
{% for config in role_regards_stack_mservices.access_instance.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.access_instance.http is defined or role_regards_stack_mservices.access_instance.jdwp is defined or role_regards_stack_mservices.access_instance.jmx is defined or role_regards_stack_mservices.access_instance.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.access_instance.http is defined %}
      - "{{ role_regards_stack_mservices.access_instance.http }}:9040"
{% endif %}
{% if role_regards_stack_mservices.access_instance.jdwp is defined %}
      - "{{ role_regards_stack_mservices.access_instance.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.access_instance.jmx is defined %}
      - "{{ role_regards_stack_mservices.access_instance.jmx }}:18040"
{% endif %}
{% if role_regards_stack_mservices.access_instance.yourkit is defined %}
      - "{{ role_regards_stack_mservices.access_instance.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.access_instance.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.access_instance.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.access_project is defined %}
  rs-access-project:
    image: {{ role_regards_stack_registry }}/rs-access-project:{{ role_regards_stack_mservices.access_project.tag }}
{% if (role_regards_stack_mservices.access_project.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.access_project.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-access-project
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9041/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 6m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.access_project | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.access_project.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.access_project.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.access_project.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.access_project.node_label_placement_constraint.value }}
{% endif %}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.access_project.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.access_project.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.access_project.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
    volumes:
      - type: volume
        source: logs-access-project-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-access-project_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_access-project.properties
        target: /tmp/rs-access-project.properties
{% if role_regards_stack_mservices.access_project.configs is defined %}
{% for config in role_regards_stack_mservices.access_project.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
{% if role_regards_stack_mservices.access_project.http is defined or role_regards_stack_mservices.access_project.jdwp is defined or role_regards_stack_mservices.access_project.jmx is defined or role_regards_stack_mservices.access_project.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.access_project.http is defined %}
      - "{{ role_regards_stack_mservices.access_project.http }}:9041"
{% endif %}
{% if role_regards_stack_mservices.access_project.jdwp is defined %}
      - "{{ role_regards_stack_mservices.access_project.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.access_project.jmx is defined %}
      - "{{ role_regards_stack_mservices.access_project.jmx }}:18041"
{% endif %}
{% if role_regards_stack_mservices.access_project.yourkit is defined %}
      - "{{ role_regards_stack_mservices.access_project.yourkit }}:10001"
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.access_project.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.access_project.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.front is defined %}
  rs-front:
    image: {{ role_regards_stack_registry }}/rs-front:{{ role_regards_stack_mservices.front.tag }}
{% if (role_regards_stack_mservices.front.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.front.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-front
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "curl -I {{ group_docker_mservices.front.protocol }}://localhost:8080 {{ role_regards_stack_mservices.front.ssl is defined | ternary('-k', '') }} -H 'Host: {{ role_regards_stack_front_healthcheck_url }}'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.front | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.front.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.front.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.front.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.front.node_label_placement_constraint.value }}
{% endif %}
    networks:
      {{ role_regards_stack_docker_network_name }}:
{% if (role_regards_stack_mservices.front.configuration | default({})).external_networks is defined %}
{% for external_network in role_regards_stack_mservices.front.configuration.external_networks %}
      {{ external_network.network }}:
{% if external_network.aliases is defined %}
        aliases:
{% for alias in external_network.aliases %}
          - {{ alias }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    environment:
      - GATEWAY_PUBLIC_URL={{ role_regards_stack_public_url }}
{% if role_regards_stack_mservices.front.port is defined %}
    ports:
      - "{{ role_regards_stack_mservices.front.port }}:8080"
{%   if role_regards_stack_front_has_rabbitmq_admin|bool %}
      - "{{ role_regards_stack_mservices.front.rabbitmq_admin }}:15672"
{%   endif %}
{% endif %}
    volumes:
      - type: volume
        source: logs-front-datavolume
        target: /var/log/nginx
      - type: tmpfs
        target: /var/cache/nginx
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /var/www/conf
{% if role_regards_stack_mservices.front.volumes is defined %}
{% for vol in role_regards_stack_mservices.front.volumes %}
      - type: volume
        source: {{ vol.source }}
        target: {{ vol.destination }}
{% endfor %}
{% endif %}
    configs:
      - source: rs-front_nginx.conf
        target: /etc/nginx/nginx.conf
{% if role_regards_stack_front_securised|bool %}
      - source: rs-front_regards.conf
        target: /etc/nginx/conf.d/regards.conf
{% if role_regards_stack_front_has_rabbitmq_admin|bool %}
      - source: rs-front_rabbitmq.conf
        target: /etc/nginx/conf.d/rabbitmq.conf
{% endif %}
{% if role_regards_stack_mservices.front.ssl is defined %}
      - source: rs-front_badhost.conf
        target: /etc/nginx/conf.d/badhost.conf
{% endif %}
{% endif %}
{% if role_regards_stack_mservices.front.show_footer|default(false)|bool %}
      - source: rs-front_version_footer.html
        target: /var/www/footer/regards-version-footer.html
      - source: rs-front_footer_cnes_logo.png
        target: /var/www/footer/imgs/CNES_Logo_Blanc_Horizontal.png
      - source: rs-front_footer_Regards.png
        target: /var/www/footer/imgs/Regards.png
{% endif %}
{% if role_regards_stack_mservices.front.ssl is defined %}
      - source: front_ssl_crt
        target: /etc/ssl/server.crt
{% endif %}
{% if role_regards_stack_mservices.front.configs is defined %}
{% for config in role_regards_stack_mservices.front.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.front.ssl is defined %}
    secrets:
      - source: front_ssl_key
        target: /etc/ssl/server.key
{% endif %}
{% if role_regards_stack_mservices.front.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.front.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.storage is defined %}
  rs-storage:
    image: {{ role_regards_stack_registry }}/rs-storage:{{ role_regards_stack_mservices.storage.tag }}
{% if (role_regards_stack_mservices.storage.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.storage.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-storage
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9042/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.storage | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.storage.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.storage.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.storage.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.storage.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.storage.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.storage.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.storage.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.storage.http is defined or role_regards_stack_mservices.storage.jdwp is defined or role_regards_stack_mservices.storage.jmx is defined or role_regards_stack_mservices.storage.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.storage.http is defined %}
      - "{{ role_regards_stack_mservices.storage.http }}:9042"
{% endif %}
{% if role_regards_stack_mservices.storage.jdwp is defined %}
      - "{{ role_regards_stack_mservices.storage.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.storage.jmx is defined %}
      - "{{ role_regards_stack_mservices.storage.jmx }}:18042"
{% endif %}
{% if role_regards_stack_mservices.storage.yourkit is defined %}
      - "{{ role_regards_stack_mservices.storage.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.storage.volumes is defined %}
{% for volume in role_regards_stack_mservices.storage.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: storage-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-storage-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
      - type: volume
        source: online-datavolume
        target: /storages
      - type: volume
        source: cache-datavolume
        target: /cache
      - type: volume
        source: dataset-attachments-input-volume
        target: /dataset-attachments-input
    configs:
      - source: rs-storage_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_storage.properties
        target: /tmp/rs-storage.properties
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.storage.configs is defined %}
{% for config in role_regards_stack_mservices.storage.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.storage.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.storage.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.order is defined %}
  rs-order:
    image: {{ role_regards_stack_registry }}/rs-order:{{ role_regards_stack_mservices.order.tag }}
{% if (role_regards_stack_mservices.order.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.order.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-order
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9043/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.order | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.order.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.order.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.order.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.order.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.order.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.order.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.order.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.order.http is defined or role_regards_stack_mservices.order.jdwp is defined or role_regards_stack_mservices.order.jmx is defined or role_regards_stack_mservices.order.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.order.http is defined %}
      - "{{ role_regards_stack_mservices.order.http }}:9043"
{% endif %}
{% if role_regards_stack_mservices.order.jdwp is defined %}
      - "{{ role_regards_stack_mservices.order.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.order.jmx is defined %}
      - "{{ role_regards_stack_mservices.order.jmx }}:18043"
{% endif %}
{% if role_regards_stack_mservices.order.yourkit is defined %}
      - "{{ role_regards_stack_mservices.order.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.order.volumes is defined %}
{% for volume in role_regards_stack_mservices.order.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: logs-order-datavolume
        target: /logs
{% if role_regards_stack_mservices.order.yourkit is defined %}
      - {{ role_regards_stack_workspace_local }}regards/yourkitSnap:/?/Snapshots
{% endif %}
      - type: tmpfs
        target: /tmp
{% if role_regards_stack_mservices.processing is defined %}
      - type: volume
        source: processing-datavolume
        target: /processing
{% endif %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-order_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_order.properties
        target: /tmp/rs-order.properties
{% if role_regards_stack_mservices.order.configs is defined %}
{% for config in role_regards_stack_mservices.order.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.order.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.order.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.processing is defined %}
  rs-processing:
    image: {{ role_regards_stack_registry }}/rs-processing:{{ role_regards_stack_mservices.processing.tag }}
{% if (role_regards_stack_mservices.processing.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.processing.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-processing
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9043/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.processing | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.processing.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.processing.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.processing.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.processing.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.processing.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.processing.jdwp is defined %}
      - ACTIVE_DEBUG=true
      # as /tmp is mounted as noexec into docker containers we configure specific tmp directory for jna lib
      - JAVA_TOOL_OPTIONS="-Djna.tmpdir=/processing/jna-tmp"
{% endif %}
{% if role_regards_stack_mservices.processing.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.processing.http is defined or role_regards_stack_mservices.processing.jdwp is defined or role_regards_stack_mservices.processing.jmx is defined or role_regards_stack_mservices.processing.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.processing.http is defined %}
      - "{{ role_regards_stack_mservices.processing.http }}:9043"
{% endif %}
{% if role_regards_stack_mservices.processing.jdwp is defined %}
      - "{{ role_regards_stack_mservices.processing.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.processing.jmx is defined %}
      - "{{ role_regards_stack_mservices.processing.jmx }}:18043"
{% endif %}
{% if role_regards_stack_mservices.processing.yourkit is defined %}
      - "{{ role_regards_stack_mservices.processing.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.processing.volumes is defined %}
{% for volume in role_regards_stack_mservices.processing.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: processing-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-processing-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: processing-datavolume
        target: /processing
    configs:
      - source: rs-processing_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_processing.properties
        target: /tmp/rs-processing.properties
{% if role_regards_stack_mservices.processing.configs is defined %}
{% for config in role_regards_stack_mservices.processing.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.processing.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.processing.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.ingest is defined %}
  rs-ingest:
    image: {{ role_regards_stack_registry }}/rs-ingest:{{ role_regards_stack_mservices.ingest.tag }}
{% if (role_regards_stack_mservices.ingest.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.ingest.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-ingest
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9044/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.ingest | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.ingest.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.ingest.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.ingest.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.ingest.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.ingest.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.ingest.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.ingest.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.ingest.http is defined or role_regards_stack_mservices.ingest.jdwp is defined or role_regards_stack_mservices.ingest.jmx is defined or role_regards_stack_mservices.ingest.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.ingest.http is defined %}
      - "{{ role_regards_stack_mservices.ingest.http }}:9044"
{% endif %}
{% if role_regards_stack_mservices.ingest.jdwp is defined %}
      - "{{ role_regards_stack_mservices.ingest.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.ingest.jmx is defined %}
      - "{{ role_regards_stack_mservices.ingest.jmx }}:18044"
{% endif %}
{% if role_regards_stack_mservices.ingest.yourkit is defined %}
      - "{{ role_regards_stack_mservices.ingest.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.ingest.volumes is defined %}
{% for volume in role_regards_stack_mservices.ingest.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: ingest-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-ingest-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-ingest_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_ingest.properties
        target: /tmp/rs-ingest.properties
{% if role_regards_stack_mservices.ingest.configs is defined %}
{% for config in role_regards_stack_mservices.ingest.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.ingest.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.ingest.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}
        
{% if role_regards_stack_mservices.dataprovider is defined %}
  rs-dataprovider:
    image: {{ role_regards_stack_registry }}/rs-dataprovider:{{ role_regards_stack_mservices.dataprovider.tag }}
{% if (role_regards_stack_mservices.dataprovider.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.dataprovider.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-dataprovider
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9045/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.dataprovider | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.dataprovider.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.dataprovider.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.dataprovider.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.dataprovider.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.dataprovider.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.dataprovider.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.dataprovider.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.dataprovider.http is defined or role_regards_stack_mservices.dataprovider.jdwp is defined or role_regards_stack_mservices.dataprovider.jmx is defined or role_regards_stack_mservices.dataprovider.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.dataprovider.http is defined %}
      - "{{ role_regards_stack_mservices.dataprovider.http }}:9045"
{% endif %}
{% if role_regards_stack_mservices.dataprovider.jdwp is defined %}
      - "{{ role_regards_stack_mservices.dataprovider.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.dataprovider.jmx is defined %}
      - "{{ role_regards_stack_mservices.dataprovider.jmx }}:18045"
{% endif %}
{% if role_regards_stack_mservices.dataprovider.yourkit is defined %}
      - "{{ role_regards_stack_mservices.dataprovider.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.dataprovider.volumes is defined %}
{% for volume in role_regards_stack_mservices.dataprovider.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: dataprovider-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-dataprovider-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-dataprovider_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_dataprovider.properties
        target: /tmp/rs-dataprovider.properties
{% if role_regards_stack_mservices.dataprovider.configs is defined %}
{% for config in role_regards_stack_mservices.dataprovider.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.dataprovider.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.dataprovider.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.worker_manager is defined %}
  rs-worker-manager:
    image: {{ role_regards_stack_registry }}/rs-worker-manager:{{ role_regards_stack_mservices.worker_manager.tag }}
{% if (role_regards_stack_mservices.worker_manager.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.worker_manager.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-worker-manager
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9047/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 7m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.worker_manager | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.worker_manager.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.worker_manager.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.worker_manager.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.worker_manager.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.worker_manager.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.worker_manager.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.worker_manager.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.worker_manager.http is defined or role_regards_stack_mservices.worker_manager.jdwp is defined or role_regards_stack_mservices.worker_manager.jmx is defined or role_regards_stack_mservices.worker_manager.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.worker_manager.http is defined %}
      - "{{ role_regards_stack_mservices.worker_manager.http }}:9047"
{% endif %}
{% if role_regards_stack_mservices.worker_manager.jdwp is defined %}
      - "{{ role_regards_stack_mservices.worker_manager.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.worker_manager.jmx is defined %}
      - "{{ role_regards_stack_mservices.worker_manager.jmx }}:18047"
{% endif %}
{% if role_regards_stack_mservices.worker_manager.yourkit is defined %}
      - "{{ role_regards_stack_mservices.worker_manager.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.worker_manager.volumes is defined %}
{% for volume in role_regards_stack_mservices.worker_manager.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
      - type: volume
        source: logs-worker-manager-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-worker-manager_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_worker-manager.properties
        target: /tmp/rs-worker-manager.properties
{% if role_regards_stack_mservices.worker_manager.configs is defined %}
{% for config in role_regards_stack_mservices.worker_manager.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.worker_manager.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.worker_manager.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.lta_manager is defined %}
  rs-lta-manager:
    image: {{ role_regards_stack_registry }}/rs-lta-manager:{{ role_regards_stack_mservices.lta_manager.tag }}
{% if (role_regards_stack_mservices.lta_manager.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.lta_manager.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-lta-manager
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9048/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.lta_manager | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.lta_manager.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.lta_manager.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.lta_manager.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.lta_manager.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.lta_manager.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.lta_manager.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.lta_manager.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.lta_manager.http is defined or role_regards_stack_mservices.lta_manager.jdwp is defined or role_regards_stack_mservices.lta_manager.jmx is defined or role_regards_stack_mservices.lta_manager.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.lta_manager.http is defined %}
      - "{{ role_regards_stack_mservices.lta_manager.http }}:9048"
{% endif %}
{% if role_regards_stack_mservices.lta_manager.jdwp is defined %}
      - "{{ role_regards_stack_mservices.lta_manager.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.lta_manager.jmx is defined %}
      - "{{ role_regards_stack_mservices.lta_manager.jmx }}:18048"
{% endif %}
{% if role_regards_stack_mservices.lta_manager.yourkit is defined %}
      - "{{ role_regards_stack_mservices.lta_manager.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
      - type: volume
        source: logs-lta-manager-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-lta-manager_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_lta-manager.properties
        target: /tmp/rs-lta-manager.properties
{% if role_regards_stack_mservices.lta_manager.configs is defined %}
{% for config in role_regards_stack_mservices.lta_manager.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.lta_manager.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.lta_manager.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.delivery is defined %}
  rs-delivery:
    image: {{ role_regards_stack_registry }}/rs-delivery:{{ role_regards_stack_mservices.delivery.tag }}
{% if (role_regards_stack_mservices.delivery.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.delivery.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-delivery
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9049/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.delivery | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.delivery.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.delivery.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.delivery.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.delivery.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.delivery.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.delivery.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.delivery.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.delivery.http is defined or role_regards_stack_mservices.delivery.jdwp is defined or role_regards_stack_mservices.delivery.jmx is defined or role_regards_stack_mservices.delivery.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.delivery.http is defined %}
      - "{{ role_regards_stack_mservices.delivery.http }}:9049"
{% endif %}
{% if role_regards_stack_mservices.delivery.jdwp is defined %}
      - "{{ role_regards_stack_mservices.delivery.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.delivery.jmx is defined %}
      - "{{ role_regards_stack_mservices.delivery.jmx }}:18049"
{% endif %}
{% if role_regards_stack_mservices.delivery.yourkit is defined %}
      - "{{ role_regards_stack_mservices.delivery.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
      - type: volume
        source: logs-delivery-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
    configs:
      - source: rs-delivery_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_delivery.properties
        target: /tmp/rs-delivery.properties
{% if role_regards_stack_mservices.delivery.configs is defined %}
{% for config in role_regards_stack_mservices.delivery.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_ca_certificates|length > 0 %}
{% for file in role_regards_stack_ca_certificates %}
      - source: ca_cert_{{ file.split('.') | first }}
        target: "/etc/ca-certificates/{{ file }}"
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.delivery.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.delivery.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.file_catalog is defined %}
  rs-file-catalog:
    image: {{ role_regards_stack_registry }}/rs-file-catalog:{{ role_regards_stack_mservices.file_catalog.tag }}
{% if (role_regards_stack_mservices.file_catalog.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.file_catalog.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-file-catalog
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9050/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.file_catalog | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.file_catalog.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.file_catalog.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.file_catalog.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.file_catalog.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.file_catalog.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.file_catalog.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.file_catalog.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.file_catalog.http is defined or role_regards_stack_mservices.file_catalog.jdwp is defined or role_regards_stack_mservices.file_catalog.jmx is defined or role_regards_stack_mservices.file_catalog.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.file_catalog.http is defined %}
      - "{{ role_regards_stack_mservices.file_catalog.http }}:9050"
{% endif %}
{% if role_regards_stack_mservices.file_catalog.jdwp is defined %}
      - "{{ role_regards_stack_mservices.file_catalog.jdwp }}:10500"
{% endif %}
{% if role_regards_stack_mservices.file_catalog.jmx is defined %}
      - "{{ role_regards_stack_mservices.file_catalog.jmx }}:18050"
{% endif %}
{% if role_regards_stack_mservices.file_catalog.yourkit is defined %}
      - "{{ role_regards_stack_mservices.file_catalog.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
      - type: volume
        source: logs-file-catalog-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-file-catalog_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_file-catalog.properties
        target: /tmp/rs-file-catalog.properties
{% if role_regards_stack_mservices.file_catalog.configs is defined %}
{% for config in role_regards_stack_mservices.file_catalog.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.file_catalog.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.file_catalog.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.file_access is defined %}
  rs-file-access:
    image: {{ role_regards_stack_registry }}/rs-file-access:{{ role_regards_stack_mservices.file_access.tag }}
{% if (role_regards_stack_mservices.file_access.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.file_access.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-file-access
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9051/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.file_access | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.file_access.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.file_access.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.file_access.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.file_access.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.file_access.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.file_access.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.file_access.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.file_access.http is defined or role_regards_stack_mservices.file_access.jdwp is defined or role_regards_stack_mservices.file_access.jmx is defined or role_regards_stack_mservices.file_access.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.file_access.http is defined %}
      - "{{ role_regards_stack_mservices.file_access.http }}:9051"
{% endif %}
{% if role_regards_stack_mservices.file_access.jdwp is defined %}
      - "{{ role_regards_stack_mservices.file_access.jdwp }}:10510"
{% endif %}
{% if role_regards_stack_mservices.file_access.jmx is defined %}
      - "{{ role_regards_stack_mservices.file_access.jmx }}:18051"
{% endif %}
{% if role_regards_stack_mservices.file_access.yourkit is defined %}
      - "{{ role_regards_stack_mservices.file_access.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
{% if role_regards_stack_mservices.file_access.volumes is defined %}
{% for volume in role_regards_stack_mservices.file_access.volumes %}
      - {{ volume.source }}:{{ volume.destination }}
{% endfor %}
{% endif %}
# Use the storage defined volume for now
      - type: volume
        source: storage-plugins-datavolume
        target: /plugins
      - type: volume
        source: logs-file-access-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
{% for data_input in role_regards_stack_volume_data_inputs %}
      - type: volume
        source: {{ data_input.name }}
        target: {{ data_input.destination }}
{% endfor %}
      - type: volume
        source: workspace-datavolume
        target: /tmp/workspace
      - type: volume
        source: online-datavolume
        target: /storages
      - type: volume
        source: cache-datavolume
        target: /cache
      - type: volume
        source: dataset-attachments-input-volume
        target: /dataset-attachments-input
    configs:
      - source: rs-file-access_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_file-access.properties
        target: /tmp/rs-file-access.properties
{% if role_regards_stack_mservices.file_access.configs is defined %}
{% for config in role_regards_stack_mservices.file_access.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.file_access.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.file_access.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}

{% if role_regards_stack_mservices.file_packager is defined %}
  rs-file-packager:
    image: {{ role_regards_stack_registry }}/rs-file-packager:{{ role_regards_stack_mservices.file_packager.tag }}
{% if (role_regards_stack_mservices.file_packager.configuration | default({})).labels is defined %}
    labels:
{% for key, value in role_regards_stack_mservices.file_packager.configuration.labels.items() %}
      {{ key }}: "{{value}}"
{% endfor %}
{% endif %}
    user: "{{ role_regards_stack_container_run_uid }}:{{ role_regards_stack_container_run_gid }}"
    hostname: rs-file-packager
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "set -eo pipefail; (curl --silent --fail --request GET http://localhost:9052/actuator/health?scope=instance | jq --exit-status -n 'inputs | if has(\"status\") then .status == \"UP\" else false end') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 9m
    deploy:
      restart_policy:
        condition: any
        delay: {{ role_regards_stack_restart_policy.delay }}
        max_attempts: {{ role_regards_stack_restart_policy.max_attempts }}
        window: {{ role_regards_stack_restart_policy.window }}
      resources:
        {{ role_regards_stack_resource_limits.file_packager | to_nice_yaml | indent(8) }}
      replicas: {{ role_regards_stack_mservices.file_packager.replicas | default(1) }}
      update_config:
        parallelism: 0
        delay: 0s
{% if role_regards_stack_mservices.file_packager.node_label_placement_constraint is defined %}
      placement:
        constraints:
          - node.labels.{{ role_regards_stack_mservices.file_packager.node_label_placement_constraint.key }} == {{ role_regards_stack_mservices.file_packager.node_label_placement_constraint.value }}
{% endif %}
    networks:
      - {{ role_regards_stack_docker_network_name }}
    environment:
      - REPLICATION_INSTANCE_ID={{ '{{.Task.Slot}}' }}
      - HEAP_SIZE={% set container_max_mem = role_regards_stack_resource_limits.file_packager.limits.memory | human_to_bytes %}{% if (container_max_mem < ('800M' | human_to_bytes)) %}EXTRA-SMALL{% elif container_max_mem < ('1200M' | human_to_bytes) %}SMALL{% elif container_max_mem < ('1600M' | human_to_bytes) %}MEDIUM{% elif container_max_mem < ('2000M' | human_to_bytes) %}LARGE{% else %}EXTRA-LARGE{% endif %}

{% if role_regards_stack_mservices.file_packager.jdwp is defined %}
      - ACTIVE_DEBUG=true
{% endif %}
{% if role_regards_stack_mservices.file_packager.yourkit is defined %}
      - ACTIVE_YOURKIT=true
{% endif %}
{% if role_regards_stack_mservices.file_packager.http is defined or role_regards_stack_mservices.file_packager.jdwp is defined or role_regards_stack_mservices.file_packager.jmx is defined or role_regards_stack_mservices.file_packager.yourkit is defined %}
    ports:
{% if role_regards_stack_mservices.file_packager.http is defined %}
      - "{{ role_regards_stack_mservices.file_packager.http }}:9052"
{% endif %}
{% if role_regards_stack_mservices.file_packager.jdwp is defined %}
      - "{{ role_regards_stack_mservices.file_packager.jdwp }}:10510"
{% endif %}
{% if role_regards_stack_mservices.file_packager.jmx is defined %}
      - "{{ role_regards_stack_mservices.file_packager.jmx }}:18052"
{% endif %}
{% if role_regards_stack_mservices.file_packager.yourkit is defined %}
      - "{{ role_regards_stack_mservices.file_packager.yourkit }}:10001"
{% endif %}
{% endif %}
    volumes:
      - type: volume
        source: logs-file-packager-datavolume
        target: /logs
      - type: tmpfs
        target: /tmp
    configs:
      - source: rs-file-packager_logback.xml
        target: /config/logback.xml
      - source: rs_ms_application.properties
        target: /tmp/application.properties
      - source: rs_ms_file-packager.properties
        target: /tmp/rs-file-packager.properties
{% if role_regards_stack_mservices.file_packager.configs is defined %}
{% for config in role_regards_stack_mservices.file_packager.configs %}
      - source: conf_{{ config.source }}
        target: {{ config.destination }}
{% endfor %}
{% endif %}
{% if role_regards_stack_mservices.file_packager.logging is defined %}
    logging:
      {{ role_regards_stack_mservices.file_packager.logging | to_nice_yaml | indent(6) }}
{% endif %}
{% endif %}
