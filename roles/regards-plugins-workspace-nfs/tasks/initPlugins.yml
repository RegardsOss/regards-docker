---
- name: "Remove container that creates plugin on NFS {{ nfs_server.name }}"
  docker_container:
    name: "create-plugin-on-nfs"
    state: absent

- name: "Create a tmp volume to initiate plugins upon {{ nfs_server.name }}"
  docker_volume:
    name: plugin_tmp_nfs
    recreate: always
    driver_options:
      type: "{{ nfs_server.config.type | default('nfs') }}"
      o: "{{ nfs_server.config.o }}"
      device: "{{ nfs_server.config.device_prefix }}{{ role_regards_plugins_workspace_nfs_mount_conf.get('device_postfix', 'regards/plugins/') }}"
  vars:
    ansible_python_interpreter: "env python{{ python_version }}"

- name: "Run plugins container"
  docker_container:
    name: "create-plugin-on-nfs"
    image: "{{ role_regards_plugins_workspace_nfs_docker_registry }}/{{ item.image }}:{{ item.tag }}"
    pull: true
    detach: false
    network_mode: none
    networks_cli_compatible: true
    read_only: true
    cleanup: true
    user: "{{ role_regards_plugins_workspace_nfs_run_uid }}:{{ role_regards_plugins_workspace_nfs_run_gid }}"
    # container_default_behavior: no_defaults
    log_driver: json-file
    # For now, let's just retry few times before killing install
    restart_retries: 10
    restart_policy: on-failure
    volumes:
      - plugin_tmp_nfs:/regards-plugins
  register: plugin_output
  # Display the task as Changed on ansible log only when there is "Plugin successfully copied" inside the log
  failed_when: plugin_output.failed
  changed_when: (plugin_output.container is defined and 'copied' in plugin_output.container.Output) or (plugin_output.ansible_facts is defined and 'copied' in plugin_output.ansible_facts.docker_container.Output)
  with_items:
    - "{{ role_regards_plugins_workspace_nfs_plugins }}"
  vars:
    ansible_python_interpreter: "env python{{ python_version }}"

- name: Remove plugin tmp volume
  docker_volume:
    name: plugin_tmp_nfs
    state: absent
  vars:
    ansible_python_interpreter: "env python{{ python_version }}"
