#jinja2: trim_blocks: True, lstrip_blocks: True
# Default values for admin-instance.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#######################################
#                                     #
#          K8S configuration          #
#                                     #
#   Override values only.             #
#   See regards-common for defaults   #
#                                     #
#######################################

global:
  regards: 
    servicesVersion: "{{ regards_version }}"
    imageRegistry: "{{ group_docker_registry }}"
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
      - name: regards-docker-registry
    configService:
      host: "{{ group_docker_mservices.config.host }}"
      port: {{ group_docker_mservices.config.http }}

image:
  tag: "{{ group_docker_mservices.admin_instance.tag  }}"
  name: rs-admin-instance

entrypointOverride: #TODO do this with an initContainer instead?
 startCommand: "/start.sh bootstrap-administration-instance-{{ regards_version }}.jar -Xmx512m"
 waitForIts:
   - host: {{ group_config_mservices.amqp.host }}
     port: {{ group_config_mservices.amqp.http }}
     strict: false
     quiet: false
     timeout: 0
   - host: {{ group_config_mservices.postgres.instance.host }}
     port: {{ group_config_mservices.postgres.instance.port }}
     strict: false
     quiet: false
     timeout: 0
   - host: {{ group_docker_mservices.config.host }}
     port: {{ group_docker_mservices.config.http }}
     strict: false
     quiet: false
     timeout: 0
   - host: {{ group_docker_mservices.registry.host }}
     port: {{ group_docker_mservices.registry.http }}
     strict: false
     quiet: false
     timeout: 0

{% if group_docker_mservices.admin_instance.jdwp is defined %}
env:
  - name: ACTIVE_DEBUG
    value: "true"
{% else %}
env: []
{% endif %}

volumes:
{% if config_maps %}
  configmaps:
  {% for config_map in config_maps %}
    - name: "{{ config_map.name }}"
  {% endfor %}
{% else %}
  configmaps: []
{% endif %}
  emptydirs:
    - name: tmpfs
      medium: Memory

volumeMounts:
{% if config_maps %}
  configmaps:
  {% for config_map in config_maps %}
    {% for path in config_map.paths %}
    - name: "{{ config_map.name }}"
      subPath: "{{ path.sub_path }}"
      mountPath: "{{ path.mount_path }}"
    {% endfor %}
  {% endfor %}
{% else %}
  configmaps: []
{% endif %}
  emptydirs:
    - name: tmpfs
      mountPath: /tmp


{% if group_docker_mservices.admin_instance.http is defined or group_docker_mservices.admin_instance.jdwp is defined or group_docker_mservices.admin_instance.jmx is defined %}
ports:
{% if group_docker_mservices.admin_instance.http is defined %}
  - name: http
    containerPort: {{ group_docker_mservices.admin_instance.http }}
    protocol: TCP
{% endif %}
{% if group_docker_mservices.admin_instance.jdwp is defined %}
  - name: jdwp
    containerPort: {{ group_docker_mservices.admin_instance.jdwp }}
    protocol: TCP
{% endif %}
{% if group_docker_mservices.admin_instance.jmx is defined %}
  - name: jmx
    containerPort: {{ group_docker_mservices.admin_instance.jmx }}
    protocol: TCP
{% endif %}
{% endif %}

# livenessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#   initialDelaySeconds: 240
#   timeoutSeconds: 10
#   periodSeconds: 5

# readinessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#   initialDelaySeconds: 5
#   timeoutSeconds: 2
#   periodSeconds: 5

service:
  type: ClusterIP
  ports:
    - name: http
      port: {{ group_docker_mservices.admin_instance.http }}
