#jinja2: trim_blocks: True, lstrip_blocks: True
# Default values for dam.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#######################################
#                                     #
#          K8S configuration          #
#                                     #
#   Override values only.             #
#   See regards-common for defaults   #
#                                     #
#######################################

global:
  regards: 
    accessMode: ReadWriteOnce
    # storageClass: "-"
    servicesVersion: "{{ regards_version }}"
    imageRegistry: "{{ group_docker_registry }}"
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
      - name: regards-docker-registry
    configService:
      host: "{{ group_docker_mservices.config.host }}"
      port: {{ group_docker_mservices.config.http }}

image:
  tag: "{{ group_docker_mservices.dam.tag }}"
  name: rs-dam

entrypointOverride: #TODO do this with an initContainer instead?
  startCommand: "/start.sh bootstrap-dam-{{ regards_version }}.jar -Xmx1500m"
  waitForIts:
    - host: {{ group_config_mservices.amqp.host }}
      port: {{ group_config_mservices.amqp.http }}
      strict: false
      quiet: false
      timeout: 0
    - host: {{ group_config_mservices.postgres.init_project.host }}
      port: {{ group_config_mservices.postgres.init_project.port }}
      strict: false
      quiet: false
      timeout: 0
    - host: {{ group_docker_mservices.config.host }}
      port: {{ group_docker_mservices.config.http }}
      strict: false
      quiet: false
      timeout: 0
    - host: {{ group_docker_mservices.registry.host }}
      port: {{ group_docker_mservices.registry.http }}
      strict: false
      quiet: false
      timeout: 0
    - host: {{ group_docker_mservices.admin.host }}
      port: {{ group_docker_mservices.admin.http }}
      strict: false
      quiet: false
      timeout: 0

{% if group_docker_mservices.dam.jdwp is defined %}
env:
  - name: ACTIVE_DEBUG
    value: "true"
{% else %}
env: []
{% endif %}

volumes:
{% if config_maps %}
  configmaps:
  {% for config_map in config_maps %}
    - name: "{{ config_map.name }}"
  {% endfor %}
{% else %}
  configmaps: []
{% endif %}
  emptydirs:
    - name: tmpfs
      medium: Memory
  persistentVolumeClaims:
    - name: regards-plugins-dam
    - name: rs-dam-storage

volumeMounts:
{% if config_maps %}
  configmaps:
  {% for config_map in config_maps %}
    {% for path in config_map.paths %}
    - name: "{{ config_map.name }}"
      subPath: "{{ path.sub_path }}"
      mountPath: "{{ path.mount_path }}"
    {% endfor %}
  {% endfor %}
{% else %}
  configmaps: []
{% endif %}
  emptydirs:
    - name: tmpfs
      mountPath: /tmp
  persistentVolumeClaims:
    - name: regards-plugins-dam
      mountPath: /plugins
      subPath: dam
    - name: rs-dam-storage
      mountPath: /storage
      subPath: rs-dam-storage

{% if group_docker_mservices.dam.http is defined or group_docker_mservices.dam.jdwp is defined or group_docker_mservices.dam.jmx is defined %}
ports:
{% if group_docker_mservices.dam.http is defined %}
  - name: http
    containerPort: {{ group_docker_mservices.dam.http }}
    protocol: TCP
{% endif %}
{% if group_docker_mservices.dam.jdwp is defined %}
  - name: jdwp
    containerPort: {{ group_docker_mservices.dam.jdwp }}
    protocol: TCP
{% endif %}
{% if group_docker_mservices.dam.jmx is defined %}
  - name: jmx
    containerPort: {{ group_docker_mservices.dam.jmx }}
    protocol: TCP
{% endif %}
{% endif %}

# livenessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#   initialDelaySeconds: 20
#   timeoutSeconds: 10
#   periodSeconds: 5

# readinessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#   initialDelaySeconds: 5
#   timeoutSeconds: 2
#   periodSeconds: 5

service:
  type: ClusterIP
  ports:
    - name: http
      port: {{ group_docker_mservices.dam.http }}

{% if group_docker_plugins %}
initContainers:
  {% for plugin in group_docker_plugins %}
{# The blank line below is intentional, don't remove it otherwise jinja messes the YAML indentation ¯\_(ツ)_/¯ #}

  - name: "{{ plugin.image }}"
    image:
      name: "{{ plugin.image }}"
      tag: "{{ plugin.tag }}"
    volumes:
      persistentVolumeClaims:
        - name: regards-plugins-dam
    volumeMounts:
      persistentVolumeClaims:
        - name: regards-plugins-dam
          mountPath: /regards-plugins

  {% endfor %}

pluginsPersistentVolumeClaim:
  name: regards-plugins-dam
  # accessMode: ReadWriteOnce
  volumeMode: Filesystem
  size: 2Gi
  # storageClass: "-"

{% else %}
initContainers: []
{% endif %}
{# The blank line below is intentional, don't remove it otherwise jinja messes the YAML indentation ¯\_(ツ)_/¯ #}

storagePersistentVolumeClaim:
  name: rs-dam-storage
  # accessMode: ReadWriteOnce
  volumeMode: Filesystem
  size: 10Gi
  # storageClass: "-"
