{% if not role_regards_rabbitmq_config_config_rabbitmq.get("legacy", True)|bool %}
# Logging
log.console = true
log.console.level = info
#log.console.formatter = json
log.file = false
log.dir = /var/log/rabbitmq/
{% endif %}

{% if role_regards_rabbitmq_config_allow_guest_user_connection|bool %}
# guest user not restricted to loopback interface
# Awful security practice,
# consider creating a new
# user with secure generated credentials!
{% else %}
# guest user restricted to loopback interface (localhost)
{% endif %}
loopback_users.guest = {{ role_regards_rabbitmq_config_allow_guest_user_connection|bool | ternary('none', 'true')}}
listeners.tcp.default = 5672
management.tcp.port = 15672
management.load_definitions = /etc/rabbitmq/definitions.json
disk_free_limit.absolute = {{ role_regards_rabbitmq_config_disk_free_limit_absolute }}

{% if role_regards_rabbitmq_config_ssl_active|bool %}
# TLS configuration
listeners.ssl.default = 5671
ssl_options.cacertfile = /etc/ca-certificates/{{ role_regards_rabbitmq_config_ssl_certificates_conf.ca }}
ssl_options.certfile   = /etc/ca-certificates/{{ role_regards_rabbitmq_config_ssl_certificates_conf.cert }}
ssl_options.keyfile    = /etc/ca-certificates/{{ role_regards_rabbitmq_config_ssl_certificates_conf.key }}
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true
{% if role_regards_rabbitmq_config_ssl_certificates_conf.password is defined %}
ssl_options.password = {{ role_regards_rabbitmq_config_ssl_certificates_conf.password }}
{% endif %}
{% endif %}

{% set ns = namespace(node_id=1) %}
{% if role_regards_rabbitmq_config_config_rabbitmq.global_service is defined %}
{%   if role_regards_rabbitmq_config_config_rabbitmq.node_label_placement_constraint is defined %}
# Due to a bug in Docker Swarm + a bug in airlang, we cannot use round-robin DNS.
# So he have to list all RabbitMQ nodes 
{%     for hostname in groups['all'] %}
{%       if hostvars[hostname].ansible_host is defined and hostvars[hostname].labels is defined %}
{%         for constraintKey, constraintValue in hostvars[hostname].labels.items() %}
{%           if constraintKey == role_regards_rabbitmq_config_config_rabbitmq.node_label_placement_constraint.key and constraintValue == role_regards_rabbitmq_config_config_rabbitmq.node_label_placement_constraint.value %}
cluster_formation.classic_config.nodes.{{ ns.node_id }} = rabbit@rs-rabbitmq-{{ hostvars[hostname].ansible_host }}
{%             set ns.node_id = ns.node_id + 1 %}
{%            endif %}
{%         endfor %}
{%       endif %}
{%     endfor %}
{%   else %}
{%     for hostname in groups['all'] %}
{%       if not (hostname in hostvars[hostname]['groups'].get('swarm_manager_only_nodes', [])) %}
cluster_formation.classic_config.nodes.{{ ns.node_id }} = rabbit@rs-rabbitmq-{{ hostvars[hostname].ansible_host }}
{%         set ns.node_id = ns.node_id + 1 %}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endif %}
