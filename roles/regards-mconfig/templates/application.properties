#######################################
# Global microservices configuration  #
#######################################

server.max-http-header-size=32KB

# PROFILES
spring.profiles.active=production

spring.output.ansi.enabled=ALWAYS

# Logger
logging.level.regards=INFO
logging.file=regards.log

# Security properties
access_token.validity_period={{ role_regards_mconfig_mservice_access_token_validity }}
jwt.secret={{ role_regards_mconfig_mservice_jwt_secret }}

# Encryption properties
regards.cipher.keyLocation=/key
regards.cipher.iv={{ role_regards_mconfig_mservice_cipher_iv }}

# Bootstrap tenants
regards.bootstrap-tenants={{ role_regards_mconfig_config_mservices.init_project }}


{% if role_regards_mconfig_proxy.url != False %}
# Proxy
http.proxy.host={{ role_regards_mconfig_proxy.url.split("://")[1].split(":")[0] }}
http.proxy.port={{ role_regards_mconfig_proxy.url.split("://")[1].split(":")[1] }}
http.proxy.noproxy={{ role_regards_mconfig_proxy.no_proxy }}
{% endif %}
http.ssl.allow_insecure={{ role_regards_mconfig_ssl.allow_insecure }}

# Database
regards.jpa.multitenant.dialect=fr.cnes.regards.framework.jpa.utils.CustomPostgresDialect
regards.jpa.multitenant.minPoolSize=3
regards.jpa.multitenant.maxPoolSize=5
regards.jpa.instance.minPoolSize=1
regards.jpa.instance.maxPoolSize=3

# Batch properties
spring.jpa.properties.hibernate.jdbc.batch_size=1024
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

# Initial project public access address
regards.config.first.project.public.access={{ role_regards_mconfig_public_url }}
# When true, automatically set a microservice in maintenance when an exception is not catched
regards.microservices.enable.maintenance.mode=false
# Instance tenant name
regards.instance.tenant.name=instance
# Authorized ip addresses split character ';'
regards.cors.requests.authorized.clients.addresses=
regards.elasticsearch.string.facet.size=10
regards.elasticsearch.string.facet.min.doc.count=1
# Eureka client configuration
eureka.instance.leaseRenewalIntervalInSeconds=1
eureka.instance.leaseExpirationDurationInSeconds=2
# Configure Hystrix (packaged with zuul)
# Enable the user of SecurityContext in the Hystrix thread
hystrix.command.default.execution.isolation.strategy=SEMAPHORE
hystrix.command.default.execution.timeout.enabled=false
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=600000
# Configure ribbon (packaged with zuul)
ribbon.eureka.enabled=true
# Download streaming timeout into Spring MVC (cf order and storage) => 1 hour
spring.mvc.async.request-timeout=3600000
# Download streaming timeout into Jetty
jetty.threadPool.idleTimeout=3600000
# Ribbon configuration
ribbon.ConnectTimeout=3000
ribbon.ReadTimeout=600000
# Eureka configuration
regards.eureka.client.enabled=true
eureka.client.enabled=true
eureka.client.serviceUrl.defaultZone=http://{{ role_regards_mconfig_eureka.host }}:{{ role_regards_mconfig_eureka.port }}/eureka
# Hateoas
spring.hateoas.use-hal-as-default-json-media-type=false

# HTTP message conversion
spring.http.converters.preferred-json-mapper=gson
# Charset used by applications
spring.http.encoding.charset=utf-8
# Change the max file size
spring.http.multipart.max-file-size=150MB
spring.http.multipart.max-request-size=200MB
# Workspace
{% if role_regards_mconfig_mservice_use_ungranular_workspace_on_workdir_network %}
regards.workspace={{ role_regards_mconfig_mservice_use_ungranular_workspace_on_workdir_network_path }}
{% else %}
regards.workspace=/tmp/workspace
{% endif %}

zuul.prefix=/api/v1
management.security.enabled=false
# Plugin scan package
regards.plugins.packages-to-scan=fr.cnes.regards

# Disable Hibernate clob exception
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Disable entity manager view pattern that causes connection leak!
# This feature allows lazy loading in web views and prevents entity manager from closing entity manager
spring.jpa.open-in-view=false

#FIXME dirty fix waiting for improvements on spring cloud openfeign
spring.main.allow-bean-definition-overriding=true

# Actuator endpoints
management.endpoints.web.exposure.include=*
#management.endpoint.health.roles
management.endpoint.health.show-details=always

# Jetty multipart request configuration
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

spring.cloud.config.allowOverride=true
spring.cloud.config.overrideNone=true
spring.cloud.config.overrideSystemProperties=false
eureka.instance.prefer-ip-address=true

# Optimization
spring.jmx.enabled=false

# First project connection Configuration
regards.jpa.multitenant.tenants[0].url=jdbc:postgresql://{{ role_regards_mconfig_postgres.project.host }}:{{ role_regards_mconfig_postgres.project.port }}/{{ role_regards_mconfig_postgres.project.db }}
regards.jpa.multitenant.tenants[0].user-name={{ role_regards_mconfig_postgres.project.user }}
regards.jpa.multitenant.tenants[0].password={{ role_regards_mconfig_postgres.project.password }}
regards.jpa.multitenant.tenants[0].tenant={{ role_regards_mconfig_config_mservices.init_project }}
regards.jpa.multitenant.tenants[0].driverClassName=org.postgresql.Driver

# Rabbitmq
spring.rabbitmq.host={{ role_regards_mconfig_amqp.host }}
spring.rabbitmq.port={{ role_regards_mconfig_amqp.client }}
spring.rabbitmq.username={{ role_regards_mconfig_amqp.user }}
spring.rabbitmq.password={{ role_regards_mconfig_amqp.password }}
regards.amqp.microservice.typeIdentifier=${spring.application.name}
regards.amqp.microservice.instanceIdentifier=${spring.application.name}_0
regards.amqp.management.host={{ role_regards_mconfig_amqp.host }}
regards.amqp.management.port={{ role_regards_mconfig_amqp.http }}

# Swagger instance host
regards.swagger.host={{ role_regards_mconfig_public_url }}
springdoc.version='@springdoc.version@'
