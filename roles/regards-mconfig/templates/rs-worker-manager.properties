##############################################
# Storage microservice configuration         #
##############################################
#### Swagger ####
regards.swagger.api-name={{ role_regards_mconfig_swagger.worker_manager.name }}
regards.swagger.api-title={{ role_regards_mconfig_swagger.worker_manager.title }}
regards.swagger.api-description={{ role_regards_mconfig_swagger.worker_manager.description }}
regards.swagger.api-license={{ role_regards_mconfig_swagger_license }}
regards.swagger.api-version='@project.version@'

# Batch properties
spring.jpa.properties.hibernate.jdbc.batch_size=1024
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

#### Job specific properties ####
regards.jobs.pool.size=2
regards.jobs.completion.update.rate.ms=1000
regards.jobs.succeeded.retention.days=1
regards.jobs.failed.retention.days=30

#### Scheduler ####
spring.task.scheduling.pool.size=6

# Database
{% if (role_regards_mconfig_mservices.worker_manager | default({})).get('configuration', {}).min_pool_size is defined %}
regards.jpa.multitenant.minPoolSize={{ role_regards_mconfig_mservices.worker_manager.configuration.min_pool_size }}
{% endif %}
{% if (role_regards_mconfig_mservices.worker_manager | default({})).get('configuration', {}).max_pool_size is defined %}
regards.jpa.multitenant.maxPoolSize={{ role_regards_mconfig_mservices.worker_manager.configuration.max_pool_size }}
{% endif %}