#
# Copyright 2018-2020, CS GROUP â€“ France, http://www.c-s.fr
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
- name: Check docker installation
  stat:
    path: /etc/docker
  register: docker_stat_result

- name: Docker installation prompt
  pause: prompt='Please confirm you allow this setup to overide your docker configuration ! Press return to continue. Press Ctrl+c and then "a" to abort'
  when: docker_stat_result.stat.exists
    
- include_tasks: redhat/package-tasks.yml
  when: ansible_facts['os_family'] == "RedHat"

- include_tasks: debian/package-tasks.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Create Docker directory
  file:
    path: /etc/docker
    state: directory
    mode: '0775'
    owner: 'root'
    group: 'docker'

- name: Load into kernel some modules required by Swarm
  modprobe:
    name: "{{ item }}"
    state: present
  with_items :
    - ip_vs_rr
    - ip_vs

- name: Check if we need to use the legacy nf_conntrack
  shell: find /lib/modules/$(uname -r) -type f -name "nf_conntrack_ipv4.ko*"
  register: use_legacy_nf_conntrack

- name: Load into kernel the legacy conntrack_ipv4 - required by Swarm
  modprobe:
    name: nf_conntrack_ipv4
    state: present
  when: use_legacy_nf_conntrack.stdout != ""

- name: Load into kernel the latest conntrack - required by Swarm
  modprobe:
    name: nf_conntrack
    state: present
  when: use_legacy_nf_conntrack.stdout == ""

- name: Stop services to clean iptables before save them
  systemd:
    name: "{{ item }}"
    state: stopped
  with_items :
    - "docker"

- include_tasks: redhat/iptables-tasks.yml
  when: ansible_facts['os_family'] == "RedHat"

- include_tasks: debian/iptables-tasks.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Active kernel tuning
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    state: present
    reload: yes
    sysctl_file: '/etc/sysctl.d/50-ansible-docker-swarm-tuning.conf'
  with_dict: '{{ kernel_tuning_parameters }}'
  when: kernel_tuning|bool == true

- name: Active RHEL kernel tuning
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    state: present
    reload: yes
    sysctl_file: '/etc/sysctl.d/50-ansible-docker-swarm-tuning.conf'
  with_dict: '{{ kernel_rhel_7_tuning_parameters }}'
  when: kernel_tuning|bool == true and ansible_facts['os_family'] == "RedHat" and ansible_facts["distribution_major_version"] == "7"

- include_tasks: redhat/disable-checksum-ip-rhel-8.yml
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts["distribution_major_version"] == "8"

- include_tasks: docker-namespace.yml

- name: Configure Docker client connexion
  template:
    src: 'docker-client.sh.j2'
    dest: '/etc/profile.d/docker-client.sh'
    owner: 'root'
    group: 'docker'
    mode: '0640'

- name: Create Docker system directory for proxy
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: Configure Docker daemon exec start
  template:
    src: "override.conf"
    dest: '/etc/systemd/system/docker.service.d/override.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Configure Docker proxy
  template:
    src: "http-proxy.conf"
    dest: '/etc/systemd/system/docker.service.d/http-proxy.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: "'docker_http_proxy' in hostvars[inventory_hostname] and 'docker_no_proxy' in hostvars[inventory_hostname]"

- name: Configure Docker Daemon
  template:
    src: 'daemon.json.j2'
    dest: '/etc/docker/daemon.json'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: Restart docker daemon
  systemd:
    name: docker
    daemon_reload: yes
    state: restarted
    enabled: yes

- include_tasks: overrideBridgeTask.yml
  when: "'docker_gwbridge_network' in hostvars[inventory_hostname]"
